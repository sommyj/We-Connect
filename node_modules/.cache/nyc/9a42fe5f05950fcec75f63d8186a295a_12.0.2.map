{"version":3,"sources":["businesses.js"],"names":["model","Business","Review","upload","dest","fileSizeLimit","renameFile","tempPath","targetPath","fs","rename","err","deleteFile","unlink","fileTypeHandleError","res","status","json","message","error","fileSizeHandleError","fileFilterMethod","req","fileErrorArray","fileSizeError","fileTypeError","filePath","file","path","Date","toISOString","originalname","mimetype","size","substring","length","authMethod","authMethodArray","noTokenProviderError","failedAuth","decodedID","token","body","query","headers","jwt","verify","app","get","decoded","id","businessesController","single","create","authValues","failedAuthError","decodedIDFromMethod","send","auth","fileFilterValues","businessName","description","email","phone","category","street","city","state","country","datefound","companyImage","userId","then","business","catch","update","findById","params","businessId","include","as","previousImage","businessForUpdate","destroy","retrieve","list","selectionType","location","findAll","where"],"mappings":"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","file":"businesses.js","sourceRoot":"/home/somto/Andela/We-Connect/server/server/controllers","sourcesContent":["import multer from 'multer';\nimport fs from 'file-system';\nimport jwt from 'jsonwebtoken';\nimport model from '../models';\nimport app from '../../app';\n\nconst [Business, Review] = [model.Business, model.Review];\n\nconst upload = multer({\n  dest: './businessesUploads/'\n});\n\nconst fileSizeLimit = 1024 * 1024 * 2;\n\n/**\n * rename file to an appropriate name\n * @param {String} tempPath The temporary path name.\n * @param {String} targetPath The target path name.\n * @returns {void} nothing.\n */\nconst renameFile = (tempPath, targetPath) => {\n  fs.rename(tempPath, targetPath, (err) => {\n    if (err) throw err;\n  });\n};\n\n/**\n * delete a file\n * @param {String} targetPath The part to delete from\n * @returns {void} nothing.\n */\nconst deleteFile = (targetPath) => {\n  fs.unlink(targetPath, (err) => {\n    if (err) throw err;\n  });\n};\n\n// file type handleError\nconst fileTypeHandleError = (res) => {\n  res.status(403).json({ message: 'Only .png and .jpg files are allowed!', error: true });\n};\n\n// file size handleError\nconst fileSizeHandleError = (res) => {\n  res.status(403).json({ message: 'file should not be more than 2mb!', error: true });\n};\n\n/* File filter handle method */\nconst fileFilterMethod = (req, res) => {\n  const fileErrorArray = [];\n  let fileSizeError = false;\n  let fileTypeError = false;\n  let filePath = '';\n\n  if (req.file) {\n    const tempPath = `./${req.file.path}`;\n    const targetPath = `./businessesUploads/${new Date().toISOString() + req.file.originalname}`;\n    if (req.file.mimetype === 'image/jpeg' || req.file.mimetype === 'image/png') {\n      if (req.file.size <= fileSizeLimit) { renameFile(tempPath, targetPath);\n        // remove the dot in targetPath\n        filePath = targetPath.substring(1, targetPath.length);\n      } else { deleteFile(tempPath);\n        fileSizeError = true;\n      }\n    } else { deleteFile(tempPath);\n      fileTypeError = true;\n    }\n  }\n  fileErrorArray[0] = fileSizeError;\n  fileErrorArray[1] = fileTypeError;\n  fileErrorArray[2] = filePath;\n\n  return fileErrorArray;\n}\n\n/* Authentication handle method */\nconst authMethod = (req, res) => {\n  const authMethodArray = [];\n  let noTokenProviderError = false;\n  let failedAuth = false;\n  let decodedID;\n\n  // check header or url parameters or post parameters for token\n  const token = req.body.token || req.query.token || req.headers['x-access-token'];\n  if (!token) {\n    if (req.file) deleteFile(`./${req.file.path}`);\n    noTokenProviderError = true;\n  }\n\n  // verifies secret and checks exp\n  jwt.verify(token, app.get('superSecret'), function(err, decoded) {\n  if (err) {\n    if (!noTokenProviderError) {\n      if (req.file) deleteFile(`./${req.file.path}`);\n      failedAuth = true;\n    }\n  }\n  else  decodedID = decoded.id;\n  });\n\n  authMethodArray[0] = noTokenProviderError;\n  authMethodArray[1] = failedAuth;\n  authMethodArray[2] = decodedID;\n\n  return authMethodArray;\n};\n\nconst businessesController = {\n  // image upload\n  upload: upload.single('companyImage'),\n  // create a business\n  create(req, res) {\n    let decodedID;\n    const authValues = authMethod(req, res);\n    const noTokenProviderError = authValues[0];\n    const failedAuthError = authValues[1];\n    const decodedIDFromMethod = authValues[2];\n\n    if(noTokenProviderError) return res.status(401).send({ auth: false, message: 'No token provided.' });\n\n    if(failedAuthError) return res.status(500).send({ auth: false, message: 'Failed to authenticate token.' });\n\n    if(decodedIDFromMethod) decodedID = decodedIDFromMethod;\n\n    //implementing the file filter method\n    const fileFilterValues = fileFilterMethod(req, res);\n    const fileSizeError = fileFilterValues[0];\n    const fileTypeError = fileFilterValues[1];\n    const filePath = fileFilterValues[2];\n\n    if(fileSizeError) return fileSizeHandleError(res);\n    if(fileTypeError) return fileTypeHandleError(res);\n\n    /* Required feilds */\n    if (!req.body.businessName || !req.body.description ||\n      !req.body.email || !req.body.phone || !req.body.category) {\n      if (filePath) { deleteFile(`./${filePath}`); }\n      return res.status(206).send({ message: 'Incomplete fields' });\n    }\n\n    return Business\n      .create({\n        businessName: req.body.businessName,\n        description: req.body.description,\n        street: req.body.street,\n        city: req.body.city,\n        state: req.body.state,\n        country: req.body.country,\n        datefound: req.body.datefound,\n        email: req.body.email,\n        phone: req.body.phone,\n        category: req.body.category,\n        companyImage: filePath,\n        userId: decodedID,\n      })\n      .then(business => res.status(201).send(business))\n      .catch((error) => {\n        if (filePath) { deleteFile(`./${filePath}`); }\n        return res.status(400).send(error);\n      });\n  },\n  // update business\n  update(req, res) {\n    let decodedID;\n\n    //implementing the file authentication method\n    const authValues = authMethod(req, res);\n    const noTokenProviderError = authValues[0];\n    const failedAuthError = authValues[1];\n    const decodedIDFromMethod = authValues[2];\n\n    if(noTokenProviderError) return res.status(401).send({ auth: false, message: 'No token provided.' });\n    if(failedAuthError) return res.status(500).send({ auth: false, message: 'Failed to authenticate token.' });\n    if(decodedIDFromMethod) decodedID = decodedIDFromMethod;\n\n    //implementing the file filter method\n    const fileFilterValues = fileFilterMethod(req, res);\n    const fileSizeError = fileFilterValues[0];\n    const fileTypeError = fileFilterValues[1];\n    const filePath = fileFilterValues[2];\n\n    if(fileSizeError) return fileSizeHandleError(res);\n    if(fileTypeError) return fileTypeHandleError(res);\n\n\n    // let filePath = '';\n    // if (req.file) {\n    //   const tempPath = `./${req.file.path}`;\n    //   const targetPath = `./businessesUploads/${new Date().toISOString() + req.file.originalname}`;\n    //   if (req.file.mimetype === 'image/jpeg' || req.file.mimetype === 'image/png') {\n    //     if (req.file.size <= fileSizeLimit) {\n    //       renameFile(tempPath, targetPath);\n    //       // remove the dot in targetPath\n    //       filePath = targetPath.substring(1, targetPath.length);\n    //     } else { deleteFile(tempPath);\n    //       return fileSizeHandleError(res);\n    //     }\n    //   } else { deleteFile(tempPath);\n    //     return fileTypeHandleError(res);\n    //   }\n    // }\n\n    return Business\n      .findById(req.params.businessId, {\n        include: [{ model: Review, as: 'reviews' }]\n      })\n      .then((business) => {\n        if (!business) {\n          // if file and url is not empty delete img for updation\n          if (filePath) { deleteFile(`./${filePath}`); }\n          return res.status(404).send({ message: 'Business not found' });\n        }\n\n        //Compare user id\n        if (decodedID !== business.userId) {\n          if (filePath) deleteFile(`./${filePath}`);\n          return res.status(403).send({auth: false, message: 'User not allowed'});\n        }\n\n\n        // holds the url of the image before update in other not to loose it\n        const previousImage = business.companyImage;\n\n        return business\n          .update({\n            businessName: req.body.businessName || business.businessName,\n            description: req.body.description || business.description,\n            street: req.body.street || business.street,\n            city: req.body.city || business.city,\n            state: req.body.state || business.state,\n            country: req.body.country || business.country,\n            datefound: req.body.datefound || business.datefound,\n            email: req.body.email || business.email,\n            phone: req.body.phone || business.phone,\n            category: req.body.category || business.category,\n            companyImage: filePath || business.companyImage,\n            userId: business.userId,\n          }).then((businessForUpdate) => {\n            // if file and url is not empty delete img for updation\n            if (filePath) {\n              if (previousImage) {\n                deleteFile(`./${previousImage}`);\n              }\n            }\n            return res.status(200).send(businessForUpdate);\n          }).catch((error) => {\n            if (filePath) { deleteFile(`./${filePath}`); }\n            return res.status(400).send(error);\n          });\n      }).catch(error => res.status(400).send(error));\n  },\n  // delete business\n  destroy(req, res) {\n\n    let decodedID;\n    const authValues = authMethod(req, res);\n    const noTokenProviderError = authValues[0];\n    const failedAuthError = authValues[1];\n    const decodedIDFromMethod = authValues[2];\n\n    if(noTokenProviderError) return res.status(401).send({ auth: false, message: 'No token provided.' });\n\n    if(failedAuthError) return res.status(500).send({ auth: false, message: 'Failed to authenticate token.' });\n\n    if(decodedIDFromMethod) decodedID = decodedIDFromMethod;\n\n    return Business\n      .findById(req.params.businessId)\n      .then((business) => {\n        if (!business) {\n          return res.status(404).send({ message: 'Business not found' });\n        }\n\n        if (decodedID !== business.userId)\n         return res.status(403).send({auth: false, message: 'User not allowed'});\n\n\n        // holds the url of the image before its is delete\n        const previousImage = business.companyImage;\n\n        return business\n          .destroy()\n          .then(() => {\n            if (business.companyImage) {\n              deleteFile(`./${business.companyImage}`);\n            }\n            return res.status(204).send();\n          }).catch(error => res.status(400).send(error));\n      }).catch(error => res.status(400).send(error));\n  },\n  // get a business\n  retrieve(req, res) {\n    return Business\n      .findById(req.params.businessId, {\n        include: [{ model: Review, as: 'reviews' }]\n      })\n      .then((business) => {\n        if (!business) {\n          return res.status(404).send({ message: 'Business not found' });\n        }\n        return res.status(200).send(business);\n      }).catch(error => res.status(400).send(error));\n  },\n  // get businesses\n  list(req, res) {\n    let selectionType;\n    if (!req.query.location && !req.query.category) {\n      selectionType = Business\n        .findAll({ include: [{ model: Review, as: 'reviews' }] });\n    }\n    if (req.query.location && !req.query.category) {\n      selectionType = Business\n        .findAll({\n          where: { country: req.query.location },\n          include: [{ model: Review, as: 'reviews' }]\n        });\n    }\n    if (!req.query.location && req.query.category) {\n      selectionType = Business\n        .findAll({\n          where: { category: req.query.category },\n          include: [{ model: Review, as: 'reviews' }]\n        });\n    }\n    if (req.query.location && req.query.category) {\n      selectionType = Business\n        .findAll({\n          where: { country: req.query.location, category: req.query.category },\n          include: [{ model: Review, as: 'reviews' }]\n        });\n    }\n    return selectionType\n      .then((business) => {\n        if (business.length === 0) {\n          return res.status(404).send({ message: 'Businesses not found' });\n        }\n        return res.status(200).send(business);\n      }).catch(error => res.status(400).send(error));\n  },\n};\n\nexport default businessesController;\n"]}