{"version":3,"sources":["users.js"],"names":["User","model","Business","upload","dest","fileSizeLimit","renameFile","tempPath","targetPath","fs","rename","err","deleteFile","unlink","fileTypeHandleError","res","status","json","message","error","fileSizeHandleError","usersController","single","create","req","filePath","file","path","Date","toISOString","originalname","mimetype","size","substring","length","body","title","firstname","lastname","username","password","email","gender","dob","phone","send","street","city","state","country","userImage","then","user","catch","check","findOne","where","list","findAll","include","as","users","update","findById","params","userId","previousImage","destroy","retrieve"],"mappings":"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","file":"users.js","sourceRoot":"/home/somto/Andela/We-Connect/server/server/controllers","sourcesContent":["import multer from 'multer';\nimport fs from 'file-system';\nimport model from '../models';\n\nconst User = model.User;\nconst Business = model.Business;\nconst upload = multer({\n  dest: './usersUploads/'\n});\n\nconst fileSizeLimit = 1024 * 1024 * 2;\n\n/**\n * rename file to an appropriate name\n * @param {String} tempPath The temporary path name.\n * @param {String} targetPath The target path name.\n * @returns {void} nothing.\n */\nconst renameFile = (tempPath, targetPath) => {\n  fs.rename(tempPath, targetPath, (err) => {\n    if (err) throw err;\n  });\n};\n\n/**\n * delete a file\n * @param {String} targetPath The part to delete from\n * @returns {void} nothing.\n */\nconst deleteFile = (targetPath) => {\n  fs.unlink(targetPath, (err) => {\n    if (err) throw err;\n  });\n};\n\n// file type handleError\nconst fileTypeHandleError = (res) => {\n  res.status(403).json({ message: 'Only .png and .jpg files are allowed!', error: true });\n};\n\n// file size handleError\nconst fileSizeHandleError = (res) => {\n  res.status(403).json({ message: 'file should not be more than 2mb!', error: true });\n};\n\nconst usersController = {\n  // image upload\n  upload: upload.single('userImage'),\n  // create a user\n  create(req, res) {\n    let filePath = '';\n    if (req.file) {\n      const tempPath = req.file.path;\n      const targetPath = `./usersUploads/${new Date().toISOString() + req.file.originalname}`;\n      if (req.file.mimetype === 'image/jpeg' || req.file.mimetype === 'image/png') {\n        if (req.file.size <= fileSizeLimit) {\n          renameFile(tempPath, targetPath);\n          // remove the dot in targetPath\n          filePath = targetPath.substring(1, targetPath.length);\n        } else {\n          deleteFile(tempPath);\n          return fileSizeHandleError(res);\n        }\n      } else {\n        deleteFile(tempPath);\n        return fileTypeHandleError(res);\n      }\n    }\n\n    if (!req.body.title || !req.body.firstname || !req.body.lastname ||\n      !req.body.username || !req.body.password || !req.body.email ||\n      !req.body.gender || !req.body.dob || !req.body.phone) {\n      if (filePath) {deleteFile(`./${filePath}`);}\n      return res.status(206).send({ message: 'Incomplete field'});\n    }\n\n    return User\n        .create({\n          title: req.body.title,\n          firstname: req.body.firstname,\n          lastname: req.body.lastname,\n          username: req.body.username,\n          password: req.body.password,\n          email: req.body.email,\n          gender: req.body.gender,\n          street: req.body.street,\n          city: req.body.city,\n          state: req.body.state,\n          country: req.body.country,\n          dob: req.body.dob,\n          phone: req.body.phone,\n          userImage: filePath\n        })\n        .then(user => {\n          return res.status(201).send(user)})\n        .catch(error => {\n          if (filePath) {\n              deleteFile(`./${filePath}`);\n            }\n          return res.status(400).send(error)\n        });\n  },\n  // login with username and password\n  check(req, res) {\n    return User\n      .findOne({ where: {username: req.body.username, password: req.body.password }})\n      .then(user => {\n        if(!user) {\n          return res.status(404).send({message: 'User not found'})\n        }\n        return res.status(200).send(user)})\n      .catch(error => res.status(400).send(error));\n  },\n  list(req, res) {\n    return User\n    .findAll({\n      include: [{\n        model: Business,\n        as: 'businesses',\n      }],\n    })\n    .then(users => res.status(200).send(users))\n    .catch(error => res.status(400).send(error));\n  },\n  // update user\n  update(req, res) {\n    let filePath = '';\n    if (req.file) {\n      const tempPath = req.file.path;\n      const targetPath = `./usersUploads/${new Date().toISOString() + req.file.originalname}`;\n\n      if (req.file.mimetype === 'image/jpeg' || req.file.mimetype === 'image/png') {\n        if (req.file.size <= fileSizeLimit) {\n          renameFile(tempPath, targetPath);\n          // remove the dot in targetPath\n          filePath = targetPath.substring(1, targetPath.length);\n        } else {\n          deleteFile(tempPath);\n          return fileSizeHandleError(res);\n        }\n      } else {\n        deleteFile(tempPath);\n        return fileTypeHandleError(res);\n      }\n    }\n\n    return User\n      .findById(req.params.userId, {\n        include: [{\n          model: Business,\n          as: 'businesses'\n        }]\n      })\n      .then(user => {\n        if(!user) {\n          // if file and url is not empty delete img for updation\n            if (filePath) {\n                deleteFile(`./${filePath}`);\n            }\n          return res.status(404).send({message: 'User not found'})\n        }\n        // holds the url of the image before update in other not to loose it\n          const previousImage = user.userImage;\n        return user\n          .update({\n            title: req.body.title || user.title,\n            firstname: req.body.firstname || user.firstname,\n            lastname: req.body.lastname || user.lastname,\n            username: req.body.username || user.username,\n            password: req.body.password || user.password,\n            email: req.body.email || user.email,\n            gender: req.body.gender || user.gender,\n            street: req.body.street || user.street,\n            city: req.body.city || user.city,\n            state: req.body.state || user.state,\n            country: req.body.country || user.country,\n            dob: req.body.dob || user.dob,\n            phone: req.body.phone || user.phone,\n            userImage: filePath || user.userImage,\n          })\n          .then(user => {\n            // if file and url is not empty delete img for updation\n              if (filePath) {\n                if (previousImage) {\n                  deleteFile(`./${previousImage}`);\n                }\n              }\n            return res.status(200).send(user)}) // Send back the updated user\n          .catch(error => {\n            if (filePath) {\n                deleteFile(`./${filePath}`);\n              }\n            return res.status(400).send(error)});\n      }).catch(error => res.status(400).send(error));\n  },\n  // delete user\n  destroy(req, res) {\n    return User\n      .findById(req.params.userId)\n      .then(user => {\n        if(!user) {\n          return res.status(404).send({message: 'User not found'});\n        }\n\n        return user\n          .destroy()\n          .then(() => {\n            if (user.userImage) {\n                  deleteFile(`./${user.userImage}`);\n            }\n            return res.status(204).send()})\n          .catch(error => res.status(400).send(error));\n      }).catch(error => res.status(400).send(error));\n    },\n  // get a user\n  retrieve(req, res) {\n    return User\n      .findById(req.params.userId, {\n        include: [{\n          model: Business,\n          as: 'businesses'\n        }]\n      })\n      .then(user => {\n        if(!user) {\n          return res.status(404).send({message: 'User not found'});\n        }\n        return res.status(200).send(user)\n      })\n      .catch(error => res.status(400).send(error));\n  },\n};\n\nexport default usersController;\n"]}