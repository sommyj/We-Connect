{"version":3,"sources":["reviews-spec.js"],"names":["process","env","NODE_ENV","chai","should","request","supertest","app","Review","model","describe","beforeEach","done","destroy","where","force","then","it","get","end","err","res","have","status","body","be","a","length","eql"],"mappings":";;AAIA;;;;AACA;;;;AAEA;;;;AACA;;;;;;AARA;AACAA,QAAQC,GAAR,CAAYC,QAAZ,GAAuB,MAAvB;;AAEA;;;AAOAC,eAAKC,MAAL;AACA,IAAMC,UAAUC,UAAUC,aAAV,CAAhB;AACA,IAAMC,SAASC,iBAAMD,MAArB;;AAGAE,SAAS,SAAT,EAAoB,YAAM;AACxBC,aAAW,UAACC,IAAD,EAAU;AAAE;AACrBJ,WAAOK,OAAP,CAAe,EAACC,OAAO,EAAR,EAAYC,OAAO,IAAnB,EAAf,EAAyCC,IAAzC,CAA8C;AAAA,aAAMJ,MAAN;AAAA,KAA9C;AACD,GAFD;;AAIAF,WAAS,aAAT,EAAwB,YAAM;AAC5BO,OAAG,6BAAH,EAAkC,UAACL,IAAD,EAAU;AAC1CP,cACGa,GADH,CACO,0BADP,EAEGC,GAFH,CAEO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjBA,YAAIjB,MAAJ,CAAWkB,IAAX,CAAgBC,MAAhB,CAAuB,GAAvB;AACAF,YAAIG,IAAJ,CAASpB,MAAT,CAAgBqB,EAAhB,CAAmBC,CAAnB,CAAqB,OAArB;AACAL,YAAIG,IAAJ,CAASG,MAAT,CAAgBvB,MAAhB,CAAuBqB,EAAvB,CAA0BG,GAA1B,CAA8B,CAA9B;AACAhfile":"reviews-spec.js","sourceRoot":"/home/somto/Andela/We-Connect/server/test","sourcesContent":["//During the test the env variable is set to test\nprocess.env.NODE_ENV = 'test';\n\n// Require the dev-dependencies\nimport chai from 'chai';\nimport chaiHttp from 'chai-http';\n\nimport model from '../server/models';\nimport app from '../app';\n\nchai.should();\nconst request = supertest(app);\nconst Review = model.Review;\n\n\ndescribe('Reviews', () => {\n  beforeEach((done) => { // Before each test we empty the database\n    Review.destroy({where: {}, force: true}).then(() => done());\n  });\n\n  describe('/GET review', () => {\n    it('it should GET empty reviews', (done) => {\n      request\n        .get('/v1/businesses/1/reviews')\n        .end((err, res) => {\n          res.should.have.status(200);\n          res.body.should.be.a('array');\n          res.body.length.should.be.eql(0);\n          done();\n        });\n    });\n//     it('it should GET all the reviews', (done) => {\n//       const review = [\n//         {\n//           id: 1,\n//           userId: '3',\n//           businessId: '2',\n//         },\n//         {\n//           id: 7,\n//           userId: '8',\n//           businessId: '2',\n//         },\n//       ];\n//\n//       // Passing review to review model\n//       Reviews.push(review[0]);\n//       Reviews.push(review[1]);\n//       chai.request(app)\n//         .get('/v1/businesses/2/reviews')\n//         .end((err, res) => {\n//           res.should.have.status(200);\n//           res.body.Reviews.should.be.a('array');\n//           res.body.should.have.property('Reviews');\n//           res.body.Reviews.should.have.deep.property(0, review[0]).property('id').eql(1);\n//           res.body.Reviews.should.have.deep.property(0, review[0]).property('userId').eql('3');\n//           res.body.Reviews.should.have.deep.property(0, review[0]).property('businessId').eql('2');\n//           res.body.Reviews.should.have.deep.property(1, review[1]).property('id').eql(7);\n//           res.body.Reviews.should.have.deep.property(1, review[1]).property('userId').eql('8');\n//           res.body.Reviews.should.have.deep.property(1, review[1]).property('businessId').eql('2');\n//           res.body.error.should.be.eql(false);\n//           done();\n//         });\n//     });\n//\n//\n//     it('it should GET empty reviews if reviews does not exists', (done) => {\n//       const review = [\n//         {\n//           id: 1,\n//           userId: '3',\n//           businessId: '2',\n//         },\n//         {\n//           id: 7,\n//           userId: '8',\n//           businessId: '2',\n//         },\n//       ];\n//\n//       // Passing review to review model\n//       Reviews.push(review[0]);\n//       Reviews.push(review[1]);\n//       chai.request(app)\n//         .get('/v1/businesses/1/reviews')\n//         .end((err, res) => {\n//           res.should.have.status(200);\n//           res.body.Reviews.should.be.a('array');\n//           res.body.should.have.property('Reviews');\n//           res.body.Reviews.length.should.be.eql(0);\n//           res.body.error.should.be.eql(false);\n//           done();\n//         });\n//     });\n  });\n//\n//   describe('/POST review', () => {\n//     it('it should not POST a review without a response, userId, businessId', (done) => {\n//       const review = {\n//         id: 1,\n//         response: '',\n//         userId: '',\n//         businessId: '',\n//       };\n//\n//       chai.request(app)\n//         .post('/v1/businesses/2/reviews')\n//         .send(review)\n//         .end((err, res) => {\n//           res.should.have.status(206);\n//           res.body.should.be.a('object');\n//           res.body.should.have.property('message').eql('Incomplete field');\n//           res.body.should.have.property('error').eql(true);\n//           done();\n//         });\n//     });\n//\n//     it('it should post a review', (done) => {\n//       const review = {\n//         id: 1,\n//         response: 'very good.',\n//         userId: '3',\n//         businessId: '2',\n//       };\n//\n//       chai.request(app)\n//         .post('/v1/businesses/2/reviews')\n//         .send(review)\n//         .end((err, res) => {\n//           res.should.have.status(201);\n//           res.body.should.be.a('object');\n//           res.body.should.have.property('Reviews');\n//           res.body.Reviews.should.have.property('id').eql(1);\n//           res.body.Reviews.should.have.property('response').eql('very good.');\n//           res.body.Reviews.should.have.property('userId').eql('3');\n//           res.body.Reviews.should.have.property('businessId').eql('2');\n//           res.body.should.have.property('message').eql('Success');\n//           res.body.should.have.property('error').eql(false);\n//           done();\n//         });\n//     });\n//   });\n});\n"]}