{"version":3,"sources":["businesses.js"],"names":["model","Business","Review","upload","dest","fileSizeLimit","renameFile","tempPath","targetPath","fs","rename","err","deleteFile","unlink","fileTypeHandleError","res","status","json","message","error","fileSizeHandleError","authMethod","req","authMethodArray","noTokenProviderError","failedAuth","decodedID","token","body","query","headers","file","path","jwt","verify","app","get","decoded","id","businessesController","single","create","authValues","failedAuthError","decodedIDFromMethod","send","auth","filePath","Date","toISOString","originalname","mimetype","size","substring","length","businessName","description","email","phone","category","street","city","state","country","datefound","companyImage","userId","then","business","catch","update","findById","params","businessId","include","as","previousImage","businessForUpdate","destroy","retrieve","list","selectionType","location","findAll","where"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;WAE2B,CAACA,iBAAMC,QAAP,EAAiBD,iBAAME,MAAvB,C;IAApBD,Q;IAAUC,M;;;AAEjB,IAAMC,SAAS,sBAAO;AACpBC,QAAM;AADc,CAAP,CAAf;;AAIA,IAAMC,gBAAgB,OAAO,IAAP,GAAc,CAApC;;AAEA;;;;;;AAMA,IAAMC,aAAa,SAAbA,UAAa,CAACC,QAAD,EAAWC,UAAX,EAA0B;AAC3CC,uBAAGC,MAAH,CAAUH,QAAV,EAAoBC,UAApB,EAAgC,UAACG,GAAD,EAAS;AACvC,QAAIA,GAAJ,EAAS,MAAMA,GAAN;AACV,GAFD;AAGD,CAJD;;AAMA;;;;;AAKA,IAAMC,aAAa,SAAbA,UAAa,CAACJ,UAAD,EAAgB;AACjCC,uBAAGI,MAAH,CAAUL,UAAV,EAAsB,UAACG,GAAD,EAAS;AAC7B,QAAIA,GAAJ,EAAS,MAAMA,GAAN;AACV,GAFD;AAGD,CAJD;;AAMA;AACA,IAAMG,sBAAsB,SAAtBA,mBAAsB,CAACC,GAAD,EAAS;AACnCA,MAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,uCAAX,EAAoDC,OAAO,IAA3D,EAArB;AACD,CAFD;;AAIA;AACA,IAAMC,sBAAsB,SAAtBA,mBAAsB,CAACL,GAAD,EAAS;AACnCA,MAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,mCAAX,EAAgDC,OAAO,IAAvD,EAArB;AACD,CAFD;;AAIA;AACA,IAAME,aAAa,SAAbA,UAAa,CAACC,GAAD,EAAMP,GAAN,EAAc;AAC/B,MAAMQ,kBAAkB,EAAxB;AACA,MAAIC,uBAAuB,KAA3B;AACA,MAAIC,aAAa,KAAjB;AACA,MAAIC,kBAAJ;;AAEA;AACA,MAAMC,QAAQL,IAAIM,IAAJ,CAASD,KAAT,IAAkBL,IAAIO,KAAJ,CAAUF,KAA5B,IAAqCL,IAAIQ,OAAJ,CAAY,gBAAZ,CAAnD;AACA,MAAI,CAACH,KAAL,EAAY;AACV,QAAIL,IAAIS,IAAR,EAAc;AACdnB,wBAAgBU,IAAIS,IAAJ,CAASC,IAAzB;AACD;AACCR,2BAAuB,IAAvB;AACD;;AAED;AACAS,yBAAIC,MAAJ,CAAWP,KAAX,EAAkBQ,cAAIC,GAAJ,CAAQ,aAAR,CAAlB,EAA0C,UAASzB,GAAT,EAAc0B,OAAd,EAAuB;AACjE,QAAI1B,GAAJ,EAASc,aAAa,IAAb,CAAT,KACMC,YAAYW,QAAQC,EAApB;AACL,GAHD;;AAKAf,kBAAgB,CAAhB,IAAqBC,oBAArB;AACAD,kBAAgB,CAAhB,IAAqBE,UAArB;AACAF,kBAAgB,CAAhB,IAAqBG,SAArB;;AAEA,SAAOH,eAAP;AACD,CA1BD;;AA4BA,IAAMgB,uBAAuB;AAC3B;AACApC,UAAQA,OAAOqC,MAAP,CAAc,cAAd,CAFmB;AAG3B;AACAC,QAJ2B,kBAIpBnB,GAJoB,EAIfP,GAJe,EAIV;AACf,QAAIW,kBAAJ;AACA,QAAMgB,aAAarB,WAAWC,GAAX,EAAgBP,GAAhB,CAAnB;AACA,QAAMS,uBAAuBkB,WAAW,CAAX,CAA7B;AACA,QAAMC,kBAAkBD,WAAW,CAAX,CAAxB;AACA,QAAME,sBAAsBF,WAAW,CAAX,CAA5B;;AAEA,QAAGlB,oBAAH,EAAyB,OAAOT,IAAIC,MAAJ,CAAW,GAAX,EAAgB6B,IAAhB,CAAqB,EAAEC,MAAM,KAAR,EAAe5B,SAAS,oBAAxB,EAArB,CAAP;;AAEzB,QAAGyB,eAAH,EAAoB,OAAO5B,IAAIC,MAAJ,CAAW,GAAX,EAAgB6B,IAAhB,CAAqB,EAAEC,MAAM,KAAR,EAAe5B,SAAS,+BAAxB,EAArB,CAAP;;AAEpB,QAAG0B,mBAAH,EAAwBlB,YAAYkB,mBAAZ;;AAExB,QAAIG,WAAW,EAAf;AACA,QAAIzB,IAAIS,IAAR,EAAc;AACZ,UAAMxB,kBAAgBe,IAAIS,IAAJ,CAASC,IAA/B;AACA,UAAMxB,uCAAoC,IAAIwC,IAAJ,GAAWC,WAAX,KAA2B3B,IAAIS,IAAJ,CAASmB,YAAxE,CAAN;AACA,UAAI5B,IAAIS,IAAJ,CAASoB,QAAT,KAAsB,YAAtB,IAAsC7B,IAAIS,IAAJ,CAASoB,QAAT,KAAsB,WAAhE,EAA6E;AAC3E,YAAI7B,IAAIS,IAAJ,CAASqB,IAAT,IAAiB/C,aAArB,EAAoC;AAAEC,qBAAWC,QAAX,EAAqBC,UAArB;AACpC;AACAuC,qBAAWvC,WAAW6C,SAAX,CAAqB,CAArB,EAAwB7C,WAAW8C,MAAnC,CAAX;AACD,SAHD,MAGO;AAAE1C,qBAAWL,QAAX;AACP,iBAAOa,oBAAoBL,GAApB,CAAP;AACD;AACF,OAPD,MAOO;AAAEH,mBAAWL,QAAX;AACP,eAAOO,oBAAoBC,GAApB,CAAP;AACD;AACF;AACD,QAAI,CAACO,IAAIM,IAAJ,CAAS2B,YAAV,IAA0B,CAACjC,IAAIM,IAAJ,CAAS4B,WAApC,IACF,CAAClC,IAAIM,IAAJ,CAAS6B,KADR,IACiB,CAACnC,IAAIM,IAAJ,CAAS8B,KAD3B,IACoC,CAACpC,IAAIM,IAAJ,CAAS+B,QADlD,EAC4D;AAC1D,UAAIZ,QAAJ,EAAc;AAAEnC,0BAAgBmC,QAAhB;AAA8B;AAC9C,aAAOhC,IAAIC,MAAJ,CAAW,GAAX,EAAgB6B,IAAhB,CAAqB,EAAE3B,SAAS,mBAAX,EAArB,CAAP;AACD;;AAED,WAAOjB,SACJwC,MADI,CACG;AACNc,oBAAcjC,IAAIM,IAAJ,CAAS2B,YADjB;AAENC,mBAAalC,IAAIM,IAAJ,CAAS4B,WAFhB;AAGNI,cAAQtC,IAAIM,IAAJ,CAASgC,MAHX;AAINC,YAAMvC,IAAIM,IAAJ,CAASiC,IAJT;AAKNC,aAAOxC,IAAIM,IAAJ,CAASkC,KALV;AAMNC,eAASzC,IAAIM,IAAJ,CAASmC,OANZ;AAONC,iBAAW1C,IAAIM,IAAJ,CAASoC,SAPd;AAQNP,aAAOnC,IAAIM,IAAJ,CAAS6B,KARV;AASNC,aAAOpC,IAAIM,IAAJ,CAAS8B,KATV;AAUNC,gBAAUrC,IAAIM,IAAJ,CAAS+B,QAVb;AAWNM,oBAAclB,QAXR;AAYNmB,cAAQxC;AAZF,KADH,EAeJyC,IAfI,CAeC;AAAA,aAAYpD,IAAIC,MAAJ,CAAW,GAAX,EAAgB6B,IAAhB,CAAqBuB,QAArB,CAAZ;AAAA,KAfD,EAgBJC,KAhBI,CAgBE,UAAClD,KAAD,EAAW;AAChB,UAAI4B,QAAJ,EAAc;AAAEnC,0BAAgBmC,QAAhB;AAA8B;AAC9C,aAAOhC,IAAIC,MAAJ,CAAW,GAAX,EAAgB6B,IAAhB,CAAqB1B,KAArB,CAAP;AACD,KAnBI,CAAP;AAoBD,GA1D0B;;AA2D3B;AACAmD,QA5D2B,kBA4DpBhD,GA5DoB,EA4DfP,GA5De,EA4DV;;AAEf,QAAIW,kBAAJ;;AAEA,QAAMgB,aAAarB,WAAWC,GAAX,EAAgBP,GAAhB,CAAnB;AACA,QAAMS,uBAAuBkB,WAAW,CAAX,CAA7B;AACA,QAAMC,kBAAkBD,WAAW,CAAX,CAAxB;AACA,QAAME,sBAAsBF,WAAW,CAAX,CAA5B;;AAEA,QAAGlB,oBAAH,EAAyB,OAAOT,IAAIC,MAAJ,CAAW,GAAX,EAAgB6B,IAAhB,CAAqB,EAAEC,MAAM,KAAR,EAAe5B,SAAS,oBAAxB,EAArB,CAAP;;AAEzB,QAAGyB,eAAH,EAAoB,OAAO5B,IAAIC,MAAJ,CAAW,GAAX,EAAgB6B,IAAhB,CAAqB,EAAEC,MAAM,KAAR,EAAe5B,SAAS,+BAAxB,EAArB,CAAP;;AAEpB,QAAG0B,mBAAH,EAAwBlB,YAAYkB,mBAAZ;;AAExB,QAAIG,WAAW,EAAf;AACA,QAAIzB,IAAIS,IAAR,EAAc;AACZ,UAAMxB,kBAAgBe,IAAIS,IAAJ,CAASC,IAA/B;AACA,UAAMxB,uCAAoC,IAAIwC,IAAJ,GAAWC,WAAX,KAA2B3B,IAAIS,IAAJ,CAASmB,YAAxE,CAAN;AACA,UAAI5B,IAAIS,IAAJ,CAASoB,QAAT,KAAsB,YAAtB,IAAsC7B,IAAIS,IAAJ,CAASoB,QAAT,KAAsB,WAAhE,EAA6E;AAC3E,YAAI7B,IAAIS,IAAJ,CAASqB,IAAT,IAAiB/C,aAArB,EAAoC;AAClCC,qBAAWC,QAAX,EAAqBC,UAArB;AACA;AACAuC,qBAAWvC,WAAW6C,SAAX,CAAqB,CAArB,EAAwB7C,WAAW8C,MAAnC,CAAX;AACD,SAJD,MAIO;AAAE1C,qBAAWL,QAAX;AACP,iBAAOa,oBAAoBL,GAApB,CAAP;AACD;AACF,OARD,MAQO;AAAEH,mBAAWL,QAAX;AACP,eAAOO,oBAAoBC,GAApB,CAAP;AACD;AACF;;AAED,WAAOd,SACJsE,QADI,CACKjD,IAAIkD,MAAJ,CAAWC,UADhB,EAC4B;AAC/BC,eAAS,CAAC,EAAE1E,OAAOE,MAAT,EAAiByE,IAAI,SAArB,EAAD;AADsB,KAD5B,EAIJR,IAJI,CAIC,UAACC,QAAD,EAAc;AAClB,UAAI,CAACA,QAAL,EAAe;AACb;AACA,YAAIrB,QAAJ,EAAc;AAAEnC,4BAAgBmC,QAAhB;AAA8B;AAC9C,eAAOhC,IAAIC,MAAJ,CAAW,GAAX,EAAgB6B,IAAhB,CAAqB,EAAE3B,SAAS,oBAAX,EAArB,CAAP;AACD;;AAED,UAAIQ,cAAc0C,SAASF,MAA3B,EACC,OAAOnD,IAAIC,MAAJ,CAAW,GAAX,EAAgB6B,IAAhB,CAAqB,EAACC,MAAM,KAAP,EAAc5B,SAAS,kBAAvB,EAArB,CAAP;;AAED;AACA,UAAM0D,gBAAgBR,SAASH,YAA/B;;AAEA,aAAOG,SACJE,MADI,CACG;AACNf,sBAAcjC,IAAIM,IAAJ,CAAS2B,YAAT,IAAyBa,SAASb,YAD1C;AAENC,qBAAalC,IAAIM,IAAJ,CAAS4B,WAAT,IAAwBY,SAASZ,WAFxC;AAGNI,gBAAQtC,IAAIM,IAAJ,CAASgC,MAAT,IAAmBQ,SAASR,MAH9B;AAINC,cAAMvC,IAAIM,IAAJ,CAASiC,IAAT,IAAiBO,SAASP,IAJ1B;AAKNC,eAAOxC,IAAIM,IAAJ,CAASkC,KAAT,IAAkBM,SAASN,KAL5B;AAMNC,iBAASzC,IAAIM,IAAJ,CAASmC,OAAT,IAAoBK,SAASL,OANhC;AAONC,mBAAW1C,IAAIM,IAAJ,CAASoC,SAAT,IAAsBI,SAASJ,SAPpC;AAQNP,eAAOnC,IAAIM,IAAJ,CAAS6B,KAAT,IAAkBW,SAASX,KAR5B;AASNC,eAAOpC,IAAIM,IAAJ,CAAS8B,KAAT,IAAkBU,SAASV,KAT5B;AAUNC,kBAAUrC,IAAIM,IAAJ,CAAS+B,QAAT,IAAqBS,SAAST,QAVlC;AAWNM,sBAAclB,YAAYqB,SAASH,YAX7B;AAYNC,gBAAQE,SAASF;AAZX,OADH,EAcFC,IAdE,CAcG,UAACU,iBAAD,EAAuB;AAC7B;AACA,YAAI9B,QAAJ,EAAc;AACZ,cAAI6B,aAAJ,EAAmB;AACjBhE,8BAAgBgE,aAAhB;AACD;AACF;AACD,eAAO7D,IAAIC,MAAJ,CAAW,GAAX,EAAgB6B,IAAhB,CAAqBgC,iBAArB,CAAP;AACD,OAtBI,EAsBFR,KAtBE,CAsBI,UAAClD,KAAD,EAAW;AAClB,YAAI4B,QAAJ,EAAc;AAAEnC,4BAAgBmC,QAAhB;AAA8B;AAC9C,eAAOhC,IAAIC,MAAJ,CAAW,GAAX,EAAgB6B,IAAhB,CAAqB1B,KAArB,CAAP;AACD,OAzBI,CAAP;AA0BD,KA3CI,EA2CFkD,KA3CE,CA2CI;AAAA,aAAStD,IAAIC,MAAJ,CAAW,GAAX,EAAgB6B,IAAhB,CAAqB1B,KAArB,CAAT;AAAA,KA3CJ,CAAP;AA4CD,GAxI0B;;AAyI3B;AACA2D,SA1I2B,mBA0InBxD,GA1ImB,EA0IdP,GA1Ic,EA0IT;;AAEhB,QAAIW,kBAAJ;AACA,QAAMgB,aAAarB,WAAWC,GAAX,EAAgBP,GAAhB,CAAnB;AACA,QAAMS,uBAAuBkB,WAAW,CAAX,CAA7B;AACA,QAAMC,kBAAkBD,WAAW,CAAX,CAAxB;AACA,QAAME,sBAAsBF,WAAW,CAAX,CAA5B;;AAEA,QAAGlB,oBAAH,EAAyB,OAAOT,IAAIC,MAAJ,CAAW,GAAX,EAAgB6B,IAAhB,CAAqB,EAAEC,MAAM,KAAR,EAAe5B,SAAS,oBAAxB,EAArB,CAAP;;AAEzB,QAAGyB,eAAH,EAAoB,OAAO5B,IAAIC,MAAJ,CAAW,GAAX,EAAgB6B,IAAhB,CAAqB,EAAEC,MAAM,KAAR,EAAe5B,SAAS,+BAAxB,EAArB,CAAP;;AAEpB,QAAG0B,mBAAH,EAAwBlB,YAAYkB,mBAAZ;;AAExB,WAAO3C,SACJsE,QADI,CACKjD,IAAIkD,MAAJ,CAAWC,UADhB,EAEJN,IAFI,CAEC,UAACC,QAAD,EAAc;AAClB,UAAI,CAACA,QAAL,EAAe;AACb,eAAOrD,IAAIC,MAAJ,CAAW,GAAX,EAAgB6B,IAAhB,CAAqB,EAAE3B,SAAS,oBAAX,EAArB,CAAP;AACD;;AAED,UAAIQ,cAAc0C,SAASF,MAA3B,EACC,OAAOnD,IAAIC,MAAJ,CAAW,GAAX,EAAgB6B,IAAhB,CAAqB,EAACC,MAAM,KAAP,EAAc5B,SAAS,kBAAvB,EAArB,CAAP;;AAGD;AACA,UAAM0D,gBAAgBR,SAASH,YAA/B;;AAEA,aAAOG,SACJU,OADI,GAEJX,IAFI,CAEC,YAAM;AACV,YAAIC,SAASH,YAAb,EAA2B;AACzBrD,4BAAgBwD,SAASH,YAAzB;AACD;AACD,eAAOlD,IAAIC,MAAJ,CAAW,GAAX,EAAgB6B,IAAhB,EAAP;AACD,OAPI,EAOFwB,KAPE,CAOI;AAAA,eAAStD,IAAIC,MAAJ,CAAW,GAAX,EAAgB6B,IAAhB,CAAqB1B,KAArB,CAAT;AAAA,OAPJ,CAAP;AAQD,KAtBI,EAsBFkD,KAtBE,CAsBI;AAAA,aAAStD,IAAIC,MAAJ,CAAW,GAAX,EAAgB6B,IAAhB,CAAqB1B,KAArB,CAAT;AAAA,KAtBJ,CAAP;AAuBD,GA/K0B;;AAgL3B;AACA4D,UAjL2B,oBAiLlBzD,GAjLkB,EAiLbP,GAjLa,EAiLR;AACjB,WAAOd,SACJsE,QADI,CACKjD,IAAIkD,MAAJ,CAAWC,UADhB,EAC4B;AAC/BC,eAAS,CAAC,EAAE1E,OAAOE,MAAT,EAAiByE,IAAI,SAArB,EAAD;AADsB,KAD5B,EAIJR,IAJI,CAIC,UAACC,QAAD,EAAc;AAClB,UAAI,CAACA,QAAL,EAAe;AACb,eAAOrD,IAAIC,MAAJ,CAAW,GAAX,EAAgB6B,IAAhB,CAAqB,EAAE3B,SAAS,oBAAX,EAArB,CAAP;AACD;AACD,aAAOH,IAAIC,MAAJ,CAAW,GAAX,EAAgB6B,IAAhB,CAAqBuB,QAArB,CAAP;AACD,KATI,EASFC,KATE,CASI;AAAA,aAAStD,IAAIC,MAAJ,CAAW,GAAX,EAAgB6B,IAAhB,CAAqB1B,KAArB,CAAT;AAAA,KATJ,CAAP;AAUD,GA5L0B;;AA6L3B;AACA6D,MA9L2B,gBA8LtB1D,GA9LsB,EA8LjBP,GA9LiB,EA8LZ;AACb,QAAIkE,sBAAJ;AACA,QAAI,CAAC3D,IAAIO,KAAJ,CAAUqD,QAAX,IAAuB,CAAC5D,IAAIO,KAAJ,CAAU8B,QAAtC,EAAgD;AAC9CsB,sBAAgBhF,SACbkF,OADa,CACL,EAAET,SAAS,CAAC,EAAE1E,OAAOE,MAAT,EAAiByE,IAAI,SAArB,EAAD,CAAX,EADK,CAAhB;AAED;AACD,QAAIrD,IAAIO,KAAJ,CAAUqD,QAAV,IAAsB,CAAC5D,IAAIO,KAAJ,CAAU8B,QAArC,EAA+C;AAC7CsB,sBAAgBhF,SACbkF,OADa,CACL;AACPC,eAAO,EAAErB,SAASzC,IAAIO,KAAJ,CAAUqD,QAArB,EADA;AAEPR,iBAAS,CAAC,EAAE1E,OAAOE,MAAT,EAAiByE,IAAI,SAArB,EAAD;AAFF,OADK,CAAhB;AAKD;AACD,QAAI,CAACrD,IAAIO,KAAJ,CAAUqD,QAAX,IAAuB5D,IAAIO,KAAJ,CAAU8B,QAArC,EAA+C;AAC7CsB,sBAAgBhF,SACbkF,OADa,CACL;AACPC,eAAO,EAAEzB,UAAUrC,IAAIO,KAAJ,CAAU8B,QAAtB,EADA;AAEPe,iBAAS,CAAC,EAAE1E,OAAOE,MAAT,EAAiByE,IAAI,SAArB,EAAD;AAFF,OADK,CAAhB;AAKD;AACD,QAAIrD,IAAIO,KAAJ,CAAUqD,QAAV,IAAsB5D,IAAIO,KAAJ,CAAU8B,QAApC,EAA8C;AAC5CsB,sBAAgBhF,SACbkF,OADa,CACL;AACPC,eAAO,EAAErB,SAASzC,IAAIO,KAAJ,CAAUqD,QAArB,EAA+BvB,UAAUrC,IAAIO,KAAJ,CAAU8B,QAAnD,EADA;AAEPe,iBAAS,CAAC,EAAE1E,OAAOE,MAAT,EAAiByE,IAAI,SAArB,EAAD;AAFF,OADK,CAAhB;AAKD;AACD,WAAOM,cACJd,IADI,CACC,UAACC,QAAD,EAAc;AAClB,UAAIA,SAASd,MAAT,KAAoB,CAAxB,EAA2B;AACzB,eAAOvC,IAAIC,MAAJ,CAAW,GAAX,EAAgB6B,IAAhB,CAAqB,EAAE3B,SAAS,sBAAX,EAArB,CAAP;AACD;AACD,aAAOH,IAAIC,MAAJ,CAAW,GAAX,EAAgB6B,IAAhB,CAAqBuB,QAArB,CAAP;AACD,KANI,EAMFC,KANE,CAMI;AAAA,aAAStD,IAAIC,MAAJ,CAAW,GAAX,EAAgB6B,IAAhB,CAAqB1B,KAArB,CAAT;AAAA,KANJ,CAAP;AAOD;AAhO0B,CAA7B;;kBAmOeoB,oB","file":"businesses.js","sourceRoot":"/home/somto/Andela/We-Connect/server/server/controllers","sourcesContent":["import multer from 'multer';\nimport fs from 'file-system';\nimport jwt from 'jsonwebtoken';\nimport model from '../models';\nimport app from '../../app';\n\nconst [Business, Review] = [model.Business, model.Review];\n\nconst upload = multer({\n  dest: './businessesUploads/'\n});\n\nconst fileSizeLimit = 1024 * 1024 * 2;\n\n/**\n * rename file to an appropriate name\n * @param {String} tempPath The temporary path name.\n * @param {String} targetPath The target path name.\n * @returns {void} nothing.\n */\nconst renameFile = (tempPath, targetPath) => {\n  fs.rename(tempPath, targetPath, (err) => {\n    if (err) throw err;\n  });\n};\n\n/**\n * delete a file\n * @param {String} targetPath The part to delete from\n * @returns {void} nothing.\n */\nconst deleteFile = (targetPath) => {\n  fs.unlink(targetPath, (err) => {\n    if (err) throw err;\n  });\n};\n\n// file type handleError\nconst fileTypeHandleError = (res) => {\n  res.status(403).json({ message: 'Only .png and .jpg files are allowed!', error: true });\n};\n\n// file size handleError\nconst fileSizeHandleError = (res) => {\n  res.status(403).json({ message: 'file should not be more than 2mb!', error: true });\n};\n\n// Authentication handling method\nconst authMethod = (req, res) => {\n  const authMethodArray = [];\n  let noTokenProviderError = false;\n  let failedAuth = false;\n  let decodedID;\n\n  // check header or url parameters or post parameters for token\n  const token = req.body.token || req.query.token || req.headers['x-access-token'];\n  if (!token) {\n    if (req.file) {\n    deleteFile(`./${req.file.path}`);\n  }\n    noTokenProviderError = true;\n  }\n\n  // verifies secret and checks exp\n  jwt.verify(token, app.get('superSecret'), function(err, decoded) {\n  if (err) failedAuth = true;\n  else  decodedID = decoded.id;\n  });\n\n  authMethodArray[0] = noTokenProviderError;\n  authMethodArray[1] = failedAuth;\n  authMethodArray[2] = decodedID;\n\n  return authMethodArray;\n};\n\nconst businessesController = {\n  // image upload\n  upload: upload.single('companyImage'),\n  // create a business\n  create(req, res) {\n    let decodedID;\n    const authValues = authMethod(req, res);\n    const noTokenProviderError = authValues[0];\n    const failedAuthError = authValues[1];\n    const decodedIDFromMethod = authValues[2];\n\n    if(noTokenProviderError) return res.status(401).send({ auth: false, message: 'No token provided.' });\n\n    if(failedAuthError) return res.status(500).send({ auth: false, message: 'Failed to authenticate token.' });\n\n    if(decodedIDFromMethod) decodedID = decodedIDFromMethod;\n\n    let filePath = '';\n    if (req.file) {\n      const tempPath = `./${req.file.path}`;\n      const targetPath = `./businessesUploads/${new Date().toISOString() + req.file.originalname}`;\n      if (req.file.mimetype === 'image/jpeg' || req.file.mimetype === 'image/png') {\n        if (req.file.size <= fileSizeLimit) { renameFile(tempPath, targetPath);\n          // remove the dot in targetPath\n          filePath = targetPath.substring(1, targetPath.length);\n        } else { deleteFile(tempPath);\n          return fileSizeHandleError(res);\n        }\n      } else { deleteFile(tempPath);\n        return fileTypeHandleError(res);\n      }\n    }\n    if (!req.body.businessName || !req.body.description ||\n      !req.body.email || !req.body.phone || !req.body.category) {\n      if (filePath) { deleteFile(`./${filePath}`); }\n      return res.status(206).send({ message: 'Incomplete fields' });\n    }\n\n    return Business\n      .create({\n        businessName: req.body.businessName,\n        description: req.body.description,\n        street: req.body.street,\n        city: req.body.city,\n        state: req.body.state,\n        country: req.body.country,\n        datefound: req.body.datefound,\n        email: req.body.email,\n        phone: req.body.phone,\n        category: req.body.category,\n        companyImage: filePath,\n        userId: decodedID,\n      })\n      .then(business => res.status(201).send(business))\n      .catch((error) => {\n        if (filePath) { deleteFile(`./${filePath}`); }\n        return res.status(400).send(error);\n      });\n  },\n  // update business\n  update(req, res) {\n\n    let decodedID;\n\n    const authValues = authMethod(req, res);\n    const noTokenProviderError = authValues[0];\n    const failedAuthError = authValues[1];\n    const decodedIDFromMethod = authValues[2];\n\n    if(noTokenProviderError) return res.status(401).send({ auth: false, message: 'No token provided.' });\n\n    if(failedAuthError) return res.status(500).send({ auth: false, message: 'Failed to authenticate token.' });\n\n    if(decodedIDFromMethod) decodedID = decodedIDFromMethod;\n\n    let filePath = '';\n    if (req.file) {\n      const tempPath = `./${req.file.path}`;\n      const targetPath = `./businessesUploads/${new Date().toISOString() + req.file.originalname}`;\n      if (req.file.mimetype === 'image/jpeg' || req.file.mimetype === 'image/png') {\n        if (req.file.size <= fileSizeLimit) {\n          renameFile(tempPath, targetPath);\n          // remove the dot in targetPath\n          filePath = targetPath.substring(1, targetPath.length);\n        } else { deleteFile(tempPath);\n          return fileSizeHandleError(res);\n        }\n      } else { deleteFile(tempPath);\n        return fileTypeHandleError(res);\n      }\n    }\n\n    return Business\n      .findById(req.params.businessId, {\n        include: [{ model: Review, as: 'reviews' }]\n      })\n      .then((business) => {\n        if (!business) {\n          // if file and url is not empty delete img for updation\n          if (filePath) { deleteFile(`./${filePath}`); }\n          return res.status(404).send({ message: 'Business not found' });\n        }\n\n        if (decodedID !== business.userId)\n         return res.status(403).send({auth: false, message: 'User not allowed'});\n\n        // holds the url of the image before update in other not to loose it\n        const previousImage = business.companyImage;\n\n        return business\n          .update({\n            businessName: req.body.businessName || business.businessName,\n            description: req.body.description || business.description,\n            street: req.body.street || business.street,\n            city: req.body.city || business.city,\n            state: req.body.state || business.state,\n            country: req.body.country || business.country,\n            datefound: req.body.datefound || business.datefound,\n            email: req.body.email || business.email,\n            phone: req.body.phone || business.phone,\n            category: req.body.category || business.category,\n            companyImage: filePath || business.companyImage,\n            userId: business.userId,\n          }).then((businessForUpdate) => {\n            // if file and url is not empty delete img for updation\n            if (filePath) {\n              if (previousImage) {\n                deleteFile(`./${previousImage}`);\n              }\n            }\n            return res.status(200).send(businessForUpdate);\n          }).catch((error) => {\n            if (filePath) { deleteFile(`./${filePath}`); }\n            return res.status(400).send(error);\n          });\n      }).catch(error => res.status(400).send(error));\n  },\n  // delete business\n  destroy(req, res) {\n\n    let decodedID;\n    const authValues = authMethod(req, res);\n    const noTokenProviderError = authValues[0];\n    const failedAuthError = authValues[1];\n    const decodedIDFromMethod = authValues[2];\n\n    if(noTokenProviderError) return res.status(401).send({ auth: false, message: 'No token provided.' });\n\n    if(failedAuthError) return res.status(500).send({ auth: false, message: 'Failed to authenticate token.' });\n\n    if(decodedIDFromMethod) decodedID = decodedIDFromMethod;\n\n    return Business\n      .findById(req.params.businessId)\n      .then((business) => {\n        if (!business) {\n          return res.status(404).send({ message: 'Business not found' });\n        }\n\n        if (decodedID !== business.userId)\n         return res.status(403).send({auth: false, message: 'User not allowed'});\n\n\n        // holds the url of the image before its is delete\n        const previousImage = business.companyImage;\n\n        return business\n          .destroy()\n          .then(() => {\n            if (business.companyImage) {\n              deleteFile(`./${business.companyImage}`);\n            }\n            return res.status(204).send();\n          }).catch(error => res.status(400).send(error));\n      }).catch(error => res.status(400).send(error));\n  },\n  // get a business\n  retrieve(req, res) {\n    return Business\n      .findById(req.params.businessId, {\n        include: [{ model: Review, as: 'reviews' }]\n      })\n      .then((business) => {\n        if (!business) {\n          return res.status(404).send({ message: 'Business not found' });\n        }\n        return res.status(200).send(business);\n      }).catch(error => res.status(400).send(error));\n  },\n  // get businesses\n  list(req, res) {\n    let selectionType;\n    if (!req.query.location && !req.query.category) {\n      selectionType = Business\n        .findAll({ include: [{ model: Review, as: 'reviews' }] });\n    }\n    if (req.query.location && !req.query.category) {\n      selectionType = Business\n        .findAll({\n          where: { country: req.query.location },\n          include: [{ model: Review, as: 'reviews' }]\n        });\n    }\n    if (!req.query.location && req.query.category) {\n      selectionType = Business\n        .findAll({\n          where: { category: req.query.category },\n          include: [{ model: Review, as: 'reviews' }]\n        });\n    }\n    if (req.query.location && req.query.category) {\n      selectionType = Business\n        .findAll({\n          where: { country: req.query.location, category: req.query.category },\n          include: [{ model: Review, as: 'reviews' }]\n        });\n    }\n    return selectionType\n      .then((business) => {\n        if (business.length === 0) {\n          return res.status(404).send({ message: 'Businesses not found' });\n        }\n        return res.status(200).send(business);\n      }).catch(error => res.status(400).send(error));\n  },\n};\n\nexport default businessesController;\n"]}