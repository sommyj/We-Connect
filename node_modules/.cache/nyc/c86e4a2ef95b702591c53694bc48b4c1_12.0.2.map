{"version":3,"sources":["users.js"],"names":["model","User","Business","upload","dest","fileSizeLimit","renameFile","tempPath","targetPath","fs","rename","err","deleteFile","unlink","fileTypeHandleError","res","status","json","message","error","fileSizeHandleError","createObject","title","req","body","firstname","lastname","username","password","email","gender","street","city","state","country","dob","phone","userImage","filePath","updateObject","user","usersController","single","create","file","path","Date","toISOString","originalname","mimetype","size","substring","length","send","then","catch","check","findOne","where","list","findAll","include","as","users","update","findById","params","userId","previousImage","userUpdate","destroy","retrieve"],"mappings":"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","file":"users.js","sourceRoot":"/home/somto/Andela/We-Connect/server/server/controllers","sourcesContent":["import multer from 'multer';\nimport fs from 'file-system';\nimport model from '../models';\n\nconst [User, Business] = [model.User, model.Business];\n\nconst upload = multer({\n  dest: './usersUploads/'\n});\n\nconst fileSizeLimit = 1024 * 1024 * 2;\n\n/**\n * rename file to an appropriate name\n * @param {String} tempPath The temporary path name.\n * @param {String} targetPath The target path name.\n * @returns {void} nothing.\n */\nconst renameFile = (tempPath, targetPath) => {\n  fs.rename(tempPath, targetPath, (err) => {\n    if (err) throw err;\n  });\n};\n\n/**\n * delete a file\n * @param {String} targetPath The part to delete from\n * @returns {void} nothing.\n */\nconst deleteFile = (targetPath) => {\n  fs.unlink(targetPath, (err) => {\n    if (err) throw err;\n  });\n};\n\n// file type handleError\nconst fileTypeHandleError = (res) => {\n  res.status(403).json({ message: 'Only .png and .jpg files are allowed!', error: true });\n};\n\n// file size handleError\nconst fileSizeHandleError = (res) => {\n  res.status(403).json({ message: 'file should not be more than 2mb!', error: true });\n};\n\nconst createObject = {\n  title: req.body.title,\n  firstname: req.body.firstname,\n  lastname: req.body.lastname,\n  username: req.body.username,\n  password: req.body.password,\n  email: req.body.email,\n  gender: req.body.gender,\n  street: req.body.street,\n  city: req.body.city,\n  state: req.body.state,\n  country: req.body.country,\n  dob: req.body.dob,\n  phone: req.body.phone,\n  userImage: filePath\n};\n\nconst updateObject = {\n  title: req.body.title || user.title,\n  firstname: req.body.firstname || user.firstname,\n  lastname: req.body.lastname || user.lastname,\n  username: req.body.username || user.username,\n  password: req.body.password || user.password,\n  email: req.body.email || user.email,\n  gender: req.body.gender || user.gender,\n  street: req.body.street || user.street,\n  city: req.body.city || user.city,\n  state: req.body.state || user.state,\n  country: req.body.country || user.country,\n  dob: req.body.dob || user.dob,\n  phone: req.body.phone || user.phone,\n  userImage: filePath || user.userImage,\n};\n\nconst usersController = {\n  // image upload\n  upload: upload.single('userImage'),\n  // create a user\n  create(req, res) {\n    let filePath = '';\n    if (req.file) {\n      const tempPath = `./${req.file.path}`;\n      const targetPath = `./usersUploads/${new Date().toISOString() + req.file.originalname}`;\n      if (req.file.mimetype === 'image/jpeg' || req.file.mimetype === 'image/png') {\n        if (req.file.size <= fileSizeLimit) {\n          renameFile(tempPath, targetPath);\n        } else {\n          deleteFile(tempPath);\n          return fileSizeHandleError(res);\n        }\n      } else {\n        deleteFile(tempPath);\n        return fileTypeHandleError(res);\n      }\n      // remove the dot in targetPath\n      filePath = targetPath.substring(1, targetPath.length);\n    }\n\n    if (!req.body.title || !req.body.firstname || !req.body.lastname ||\n      !req.body.username || !req.body.password || !req.body.email ||\n      !req.body.gender || !req.body.dob || !req.body.phone) {\n      if (filePath) { deleteFile(`./${filePath}`); }\n      return res.status(206).send({ message: 'Incomplete field' });\n    }\n\n    return User\n      .create(createObject)\n      .then(user => res.status(201).send(user))\n      .catch((error) => {\n        if (filePath) {\n          deleteFile(`./${filePath}`);\n        }\n        return res.status(400).send(error);\n      });\n  },\n  // login with username and password\n  check(req, res) {\n    return User\n      .findOne({ where: { username: req.body.username, password: req.body.password } })\n      .then((user) => {\n        if (!user) {\n          return res.status(404).send({ message: 'User not found' });\n        }\n        return res.status(200).send(user);\n      })\n      .catch(error => res.status(400).send(error));\n  },\n  list(req, res) {\n    return User\n      .findAll({\n        include: [{\n          model: Business,\n          as: 'businesses',\n        }],\n      })\n      .then(users => res.status(200).send(users))\n      .catch(error => res.status(400).send(error));\n  },\n  // update user\n  update(req, res) {\n    let filePath = '';\n    if (req.file) {\n      const tempPath = `./${req.file.path}`;\n      const targetPath = `./usersUploads/${new Date().toISOString() + req.file.originalname}`;\n\n      if (req.file.mimetype === 'image/jpeg' || req.file.mimetype === 'image/png') {\n        if (req.file.size <= fileSizeLimit) {\n          renameFile(tempPath, targetPath);\n          // remove the dot in targetPath\n          filePath = targetPath.substring(1, targetPath.length);\n        } else {\n          deleteFile(tempPath);\n          return fileSizeHandleError(res);\n        }\n      } else {\n        deleteFile(tempPath);\n        return fileTypeHandleError(res);\n      }\n    }\n\n    return User\n      .findById(req.params.userId, {\n        include: [{\n          model: Business,\n          as: 'businesses'\n        }]\n      })\n      .then((user) => {\n        if (!user) {\n          // if file and url is not empty delete img for updation\n          if (filePath) {\n            deleteFile(`./${filePath}`);\n          }\n          return res.status(404).send({ message: 'User not found' });\n        }\n        // holds the url of the image before update in other not to loose it\n        const previousImage = user.userImage;\n        return user\n          .update(updateObject)\n          .then((userUpdate) => {\n            // if file and url is not empty delete img for updation\n            if (filePath) {\n              if (previousImage) {\n                deleteFile(`./${previousImage}`);\n              }\n            }\n            return res.status(200).send(userUpdate);\n          }) // Send back the updated user\n          .catch((error) => {\n            if (filePath) {\n              deleteFile(`./${filePath}`);\n            }\n            return res.status(400).send(error);\n          });\n      }).catch(error => res.status(400).send(error));\n  },\n  // delete user\n  destroy(req, res) {\n    return User\n      .findById(req.params.userId)\n      .then((user) => {\n        if (!user) {\n          return res.status(404).send({ message: 'User not found' });\n        }\n\n        return user\n          .destroy()\n          .then(() => {\n            if (user.userImage) {\n              deleteFile(`./${user.userImage}`);\n            }\n            return res.status(204).send();\n          })\n          .catch(error => res.status(400).send(error));\n      }).catch(error => res.status(400).send(error));\n  },\n  // get a user\n  retrieve(req, res) {\n    return User\n      .findById(req.params.userId, {\n        include: [{\n          model: Business,\n          as: 'businesses'\n        }]\n      })\n      .then((user) => {\n        if (!user) {\n          return res.status(404).send({ message: 'User not found' });\n        }\n        return res.status(200).send(user);\n      })\n      .catch(error => res.status(400).send(error));\n  },\n};\n\nexport default usersController;\n"]}