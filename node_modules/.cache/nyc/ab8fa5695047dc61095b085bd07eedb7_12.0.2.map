{"version":3,"sources":["businesses.js"],"names":["model","Business","Review","upload","dest","fileSizeLimit","renameFile","tempPath","targetPath","fs","rename","err","deleteFile","unlink","fileTypeHandleError","res","status","json","message","error","fileSizeHandleError","businessesController","single","create","req","filePath","file","path","Date","toISOString","originalname","mimetype","size","substring","length","body","businessName","description","email","phone","category","send","street","city","state","country","datefound","companyImage","userId","then","business","catch","update","findById","params","businessId","include","as","previousImage","businessForUpdate","destroy","retrieve","list","selectionType","query","location","findAll","where"],"mappings":"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","file":"businesses.js","sourceRoot":"/home/somto/Andela/We-Connect/server/server/controllers","sourcesContent":["import multer from 'multer';\nimport fs from 'file-system';\nimport model from '../models';\n\nconst [Business, Review] = [model.Business, model.Review];\n\nconst upload = multer({\n  dest: './businessesUploads/'\n});\n\nconst fileSizeLimit = 1024 * 1024 * 2;\n\n/**\n * rename file to an appropriate name\n * @param {String} tempPath The temporary path name.\n * @param {String} targetPath The target path name.\n * @returns {void} nothing.\n */\nconst renameFile = (tempPath, targetPath) => {\n  fs.rename(tempPath, targetPath, (err) => {\n    if (err) throw err;\n  });\n};\n\n/**\n * delete a file\n * @param {String} targetPath The part to delete from\n * @returns {void} nothing.\n */\nconst deleteFile = (targetPath) => {\n  fs.unlink(targetPath, (err) => {\n    if (err) throw err;\n  });\n};\n\n// file type handleError\nconst fileTypeHandleError = (res) => {\n  res.status(403).json({ message: 'Only .png and .jpg files are allowed!', error: true });\n};\n\n// file size handleError\nconst fileSizeHandleError = (res) => {\n  res.status(403).json({ message: 'file should not be more than 2mb!', error: true });\n};\n\nconst businessesController = {\n  // image upload\n  upload: upload.single('companyImage'),\n  // create a business\n  create(req, res) {\n    let filePath = '';\n    if (req.file) {\n      const tempPath = `./${req.file.path}`;\n      const targetPath = `./businessesUploads/${new Date().toISOString() + req.file.originalname}`;\n      if (req.file.mimetype === 'image/jpeg' || req.file.mimetype === 'image/png') {\n        if (req.file.size <= fileSizeLimit) { renameFile(tempPath, targetPath);\n          // remove the dot in targetPath\n          filePath = targetPath.substring(1, targetPath.length);\n        } else { deleteFile(tempPath);\n          return fileSizeHandleError(res);\n        }\n      } else { deleteFile(tempPath);\n        return fileTypeHandleError(res);\n      }\n    }\n    if (!req.body.businessName || !req.body.description ||\n      !req.body.email || !req.body.phone || !req.body.category) {\n      if (filePath) { deleteFile(`./${filePath}`); }\n      return res.status(206).send({ message: 'Incomplete fields' });\n    }\n    return Business\n      .create({\n        businessName: req.body.businessName,\n        description: req.body.description,\n        street: req.body.street,\n        city: req.body.city,\n        state: req.body.state,\n        country: req.body.country,\n        datefound: req.body.datefound,\n        email: req.body.email,\n        phone: req.body.phone,\n        category: req.body.category,\n        companyImage: filePath,\n        userId: req.body.userId,\n      })\n      .then(business => res.status(201).send(business))\n      .catch((error) => {\n        if (filePath) { deleteFile(`./${filePath}`); }\n        return res.status(400).send(error);\n      });\n  },\n  // update business\n  update(req, res) {\n    let filePath = '';\n    if (req.file) {\n      const tempPath = `./${req.file.path}`;\n      const targetPath = `./businessesUploads/${new Date().toISOString() + req.file.originalname}`;\n      if (req.file.mimetype === 'image/jpeg' || req.file.mimetype === 'image/png') {\n        if (req.file.size <= fileSizeLimit) {\n          renameFile(tempPath, targetPath);\n          // remove the dot in targetPath\n          filePath = targetPath.substring(1, targetPath.length);\n        } else { deleteFile(tempPath);\n          return fileSizeHandleError(res);\n        }\n      } else { deleteFile(tempPath);\n        return fileTypeHandleError(res);\n      }\n    }\n\n    return Business\n      .findById(req.params.businessId, {\n        include: [{ model: Review, as: 'reviews' }]\n      })\n      .then((business) => {\n        if (!business) {\n          // if file and url is not empty delete img for updation\n          if (filePath) { deleteFile(`./${filePath}`); }\n          return res.status(404).send({ message: 'Business not found' });\n        }\n        // holds the url of the image before update in other not to loose it\n        const previousImage = business.companyImage;\n\n        return business\n          .update({\n            businessName: req.body.businessName || business.businessName,\n            description: req.body.description || business.description,\n            street: req.body.street || business.street,\n            city: req.body.city || business.city,\n            state: req.body.state || business.state,\n            country: req.body.country || business.country,\n            datefound: req.body.datefound || business.datefound,\n            email: req.body.email || business.email,\n            phone: req.body.phone || business.phone,\n            category: req.body.category || business.category,\n            companyImage: filePath || business.companyImage,\n            userId: req.body.userId || business.userId,\n          }).then((businessForUpdate) => {\n            // if file and url is not empty delete img for updation\n            if (filePath) {\n              if (previousImage) {\n                deleteFile(`./${previousImage}`);\n              }\n            }\n            return res.status(200).send(businessForUpdate);\n          }).catch((error) => {\n            if (filePath) { deleteFile(`./${filePath}`); }\n            return res.status(400).send(error);\n          });\n      }).catch(error => res.status(400).send(error));\n  },\n  // delete business\n  destroy(req, res) {\n    return Business\n      .findById(req.params.businessId)\n      .then((business) => {\n        if (!business) {\n          return res.status(404).send({ message: 'Business not found' });\n        }\n        return business\n          .destroy()\n          .then(() => {\n            if (business.companyImage) {\n              deleteFile(`./${business.companyImage}`);\n            }\n            return res.status(204).send();\n          }).catch(error => res.status(400).send(error));\n      }).catch(error => res.status(400).send(error));\n  },\n  // get a business\n  retrieve(req, res) {\n    return Business\n      .findById(req.params.businessId, {\n        include: [{ model: Review, as: 'reviews' }]\n      })\n      .then((business) => {\n        if (!business) {\n          return res.status(404).send({ message: 'Business not found' });\n        }\n        return res.status(200).send(business);\n      }).catch(error => res.status(400).send(error));\n  },\n  // get businesses\n  list(req, res) {\n    let selectionType;\n    if (!req.query.location && !req.query.category) {\n      selectionType = Business\n        .findAll({ include: [{ model: Review, as: 'reviews' }] });\n    }\n    if (req.query.location && !req.query.category) {\n      selectionType = Business\n        .findAll({\n          where: { country: req.query.location },\n          include: [{ model: Review, as: 'reviews' }]\n        });\n    }\n    if (!req.query.location && req.query.category) {\n      selectionType = Business\n        .findAll({\n          where: { category: req.query.category },\n          include: [{ model: Review, as: 'reviews' }]\n        });\n    }\n    if (req.query.location && req.query.category) {\n      selectionType = Business\n        .findAll({\n          where: { country: req.query.location, category: req.query.category },\n          include: [{ model: Review, as: 'reviews' }]\n        });\n    }\n    return selectionType\n      .then((business) => {\n        if (business.length === 0) {\n          return res.status(404).send({ message: 'Businesses not found' });\n        }\n        return res.status(200).send(business);\n      }).catch(error => res.status(400).send(error));\n  },\n};\n\nexport default businessesController;\n"]}