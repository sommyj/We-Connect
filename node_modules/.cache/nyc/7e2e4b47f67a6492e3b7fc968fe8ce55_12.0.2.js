// //During the test the env variable is set to test
// process.env.NODE_ENV = 'test';
// 
// // Require the dev-dependencies
// import chai from 'chai';
// import chaiHttp from 'chai-http';
//
// import Reviews from '../server/models/review';
// import app from '../app';
//
// chai.should();
// chai.use(chaiHttp);
//
//
// describe('Reviews', () => {
//   beforeEach((done) => { // Before each test we empty the database
//     Reviews.splice(0, Reviews.length);
//     done();
//   });
//
//   describe('/GET review', () => {
//     it('it should GET empty reviews', (done) => {
//       chai.request(app)
//         .get('/v1/businesses/1/reviews')
//         .end((err, res) => {
//           res.should.have.status(200);
//           res.body.Reviews.should.be.a('array');
//           res.body.should.have.property('Reviews');
//           res.body.Reviews.length.should.be.eql(0);
//           res.body.error.should.be.eql(false);
//           done();
//         });
//     });
//     it('it should GET all the reviews', (done) => {
//       const review = [
//         {
//           id: 1,
//           userId: '3',
//           businessId: '2',
//         },
//         {
//           id: 7,
//           userId: '8',
//           businessId: '2',
//         },
//       ];
//
//       // Passing review to review model
//       Reviews.push(review[0]);
//       Reviews.push(review[1]);
//       chai.request(app)
//         .get('/v1/businesses/2/reviews')
//         .end((err, res) => {
//           res.should.have.status(200);
//           res.body.Reviews.should.be.a('array');
//           res.body.should.have.property('Reviews');
//           res.body.Reviews.should.have.deep.property(0, review[0]).property('id').eql(1);
//           res.body.Reviews.should.have.deep.property(0, review[0]).property('userId').eql('3');
//           res.body.Reviews.should.have.deep.property(0, review[0]).property('businessId').eql('2');
//           res.body.Reviews.should.have.deep.property(1, review[1]).property('id').eql(7);
//           res.body.Reviews.should.have.deep.property(1, review[1]).property('userId').eql('8');
//           res.body.Reviews.should.have.deep.property(1, review[1]).property('businessId').eql('2');
//           res.body.error.should.be.eql(false);
//           done();
//         });
//     });
//
//
//     it('it should GET empty reviews if reviews does not exists', (done) => {
//       const review = [
//         {
//           id: 1,
//           userId: '3',
//           businessId: '2',
//         },
//         {
//           id: 7,
//           userId: '8',
//           businessId: '2',
//         },
//       ];
//
//       // Passing review to review model
//       Reviews.push(review[0]);
//       Reviews.push(review[1]);
//       chai.request(app)
//         .get('/v1/businesses/1/reviews')
//         .end((err, res) => {
//           res.should.have.status(200);
//           res.body.Reviews.should.be.a('array');
//           res.body.should.have.property('Reviews');
//           res.body.Reviews.length.should.be.eql(0);
//           res.body.error.should.be.eql(false);
//           done();
//         });
//     });
//   });
//
//   describe('/POST review', () => {
//     it('it should not POST a review without a response, userId, businessId', (done) => {
//       const review = {
//         id: 1,
//         response: '',
//         userId: '',
//         businessId: '',
//       };
//
//       chai.request(app)
//         .post('/v1/businesses/2/reviews')
//         .send(review)
//         .end((err, res) => {
//           res.should.have.status(206);
//           res.body.should.be.a('object');
//           res.body.should.have.property('message').eql('Incomplete field');
//           res.body.should.have.property('error').eql(true);
//           done();
//         });
//     });
//
//     it('it should post a review', (done) => {
//       const review = {
//         id: 1,
//         response: 'very good.',
//         userId: '3',
//         businessId: '2',
//       };
//
//       chai.request(app)
//         .post('/v1/businesses/2/reviews')
//         .send(review)
//         .end((err, res) => {
//           res.should.have.status(201);
//           res.body.should.be.a('object');
//           res.body.should.have.property('Reviews');
//           res.body.Reviews.should.have.property('id').eql(1);
//           res.body.Reviews.should.have.property('response').eql('very good.');
//           res.body.Reviews.should.have.property('userId').eql('3');
//           res.body.Reviews.should.have.property('businessId').eql('2');
//           res.body.should.have.property('message').eql('Success');
//           res.body.should.have.property('error').eql(false);
//           done();
//         });
//     });
//   });
// });
"use strict";//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJldmlld3Mtc3BlYy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJyZXZpZXdzLXNwZWMuanMiLCJzb3VyY2VSb290IjoiL2hvbWUvc29tdG8vQW5kZWxhL1dlLUNvbm5lY3Qvc2VydmVyL3Rlc3QiLCJzb3VyY2VzQ29udGVudCI6WyIvLyAvL0R1cmluZyB0aGUgdGVzdCB0aGUgZW52IHZhcmlhYmxlIGlzIHNldCB0byB0ZXN0XG4vLyBwcm9jZXNzLmVudi5OT0RFX0VOViA9ICd0ZXN0Jztcbi8vIFxuLy8gLy8gUmVxdWlyZSB0aGUgZGV2LWRlcGVuZGVuY2llc1xuLy8gaW1wb3J0IGNoYWkgZnJvbSAnY2hhaSc7XG4vLyBpbXBvcnQgY2hhaUh0dHAgZnJvbSAnY2hhaS1odHRwJztcbi8vXG4vLyBpbXBvcnQgUmV2aWV3cyBmcm9tICcuLi9zZXJ2ZXIvbW9kZWxzL3Jldmlldyc7XG4vLyBpbXBvcnQgYXBwIGZyb20gJy4uL2FwcCc7XG4vL1xuLy8gY2hhaS5zaG91bGQoKTtcbi8vIGNoYWkudXNlKGNoYWlIdHRwKTtcbi8vXG4vL1xuLy8gZGVzY3JpYmUoJ1Jldmlld3MnLCAoKSA9PiB7XG4vLyAgIGJlZm9yZUVhY2goKGRvbmUpID0+IHsgLy8gQmVmb3JlIGVhY2ggdGVzdCB3ZSBlbXB0eSB0aGUgZGF0YWJhc2Vcbi8vICAgICBSZXZpZXdzLnNwbGljZSgwLCBSZXZpZXdzLmxlbmd0aCk7XG4vLyAgICAgZG9uZSgpO1xuLy8gICB9KTtcbi8vXG4vLyAgIGRlc2NyaWJlKCcvR0VUIHJldmlldycsICgpID0+IHtcbi8vICAgICBpdCgnaXQgc2hvdWxkIEdFVCBlbXB0eSByZXZpZXdzJywgKGRvbmUpID0+IHtcbi8vICAgICAgIGNoYWkucmVxdWVzdChhcHApXG4vLyAgICAgICAgIC5nZXQoJy92MS9idXNpbmVzc2VzLzEvcmV2aWV3cycpXG4vLyAgICAgICAgIC5lbmQoKGVyciwgcmVzKSA9PiB7XG4vLyAgICAgICAgICAgcmVzLnNob3VsZC5oYXZlLnN0YXR1cygyMDApO1xuLy8gICAgICAgICAgIHJlcy5ib2R5LlJldmlld3Muc2hvdWxkLmJlLmEoJ2FycmF5Jyk7XG4vLyAgICAgICAgICAgcmVzLmJvZHkuc2hvdWxkLmhhdmUucHJvcGVydHkoJ1Jldmlld3MnKTtcbi8vICAgICAgICAgICByZXMuYm9keS5SZXZpZXdzLmxlbmd0aC5zaG91bGQuYmUuZXFsKDApO1xuLy8gICAgICAgICAgIHJlcy5ib2R5LmVycm9yLnNob3VsZC5iZS5lcWwoZmFsc2UpO1xuLy8gICAgICAgICAgIGRvbmUoKTtcbi8vICAgICAgICAgfSk7XG4vLyAgICAgfSk7XG4vLyAgICAgaXQoJ2l0IHNob3VsZCBHRVQgYWxsIHRoZSByZXZpZXdzJywgKGRvbmUpID0+IHtcbi8vICAgICAgIGNvbnN0IHJldmlldyA9IFtcbi8vICAgICAgICAge1xuLy8gICAgICAgICAgIGlkOiAxLFxuLy8gICAgICAgICAgIHVzZXJJZDogJzMnLFxuLy8gICAgICAgICAgIGJ1c2luZXNzSWQ6ICcyJyxcbi8vICAgICAgICAgfSxcbi8vICAgICAgICAge1xuLy8gICAgICAgICAgIGlkOiA3LFxuLy8gICAgICAgICAgIHVzZXJJZDogJzgnLFxuLy8gICAgICAgICAgIGJ1c2luZXNzSWQ6ICcyJyxcbi8vICAgICAgICAgfSxcbi8vICAgICAgIF07XG4vL1xuLy8gICAgICAgLy8gUGFzc2luZyByZXZpZXcgdG8gcmV2aWV3IG1vZGVsXG4vLyAgICAgICBSZXZpZXdzLnB1c2gocmV2aWV3WzBdKTtcbi8vICAgICAgIFJldmlld3MucHVzaChyZXZpZXdbMV0pO1xuLy8gICAgICAgY2hhaS5yZXF1ZXN0KGFwcClcbi8vICAgICAgICAgLmdldCgnL3YxL2J1c2luZXNzZXMvMi9yZXZpZXdzJylcbi8vICAgICAgICAgLmVuZCgoZXJyLCByZXMpID0+IHtcbi8vICAgICAgICAgICByZXMuc2hvdWxkLmhhdmUuc3RhdHVzKDIwMCk7XG4vLyAgICAgICAgICAgcmVzLmJvZHkuUmV2aWV3cy5zaG91bGQuYmUuYSgnYXJyYXknKTtcbi8vICAgICAgICAgICByZXMuYm9keS5zaG91bGQuaGF2ZS5wcm9wZXJ0eSgnUmV2aWV3cycpO1xuLy8gICAgICAgICAgIHJlcy5ib2R5LlJldmlld3Muc2hvdWxkLmhhdmUuZGVlcC5wcm9wZXJ0eSgwLCByZXZpZXdbMF0pLnByb3BlcnR5KCdpZCcpLmVxbCgxKTtcbi8vICAgICAgICAgICByZXMuYm9keS5SZXZpZXdzLnNob3VsZC5oYXZlLmRlZXAucHJvcGVydHkoMCwgcmV2aWV3WzBdKS5wcm9wZXJ0eSgndXNlcklkJykuZXFsKCczJyk7XG4vLyAgICAgICAgICAgcmVzLmJvZHkuUmV2aWV3cy5zaG91bGQuaGF2ZS5kZWVwLnByb3BlcnR5KDAsIHJldmlld1swXSkucHJvcGVydHkoJ2J1c2luZXNzSWQnKS5lcWwoJzInKTtcbi8vICAgICAgICAgICByZXMuYm9keS5SZXZpZXdzLnNob3VsZC5oYXZlLmRlZXAucHJvcGVydHkoMSwgcmV2aWV3WzFdKS5wcm9wZXJ0eSgnaWQnKS5lcWwoNyk7XG4vLyAgICAgICAgICAgcmVzLmJvZHkuUmV2aWV3cy5zaG91bGQuaGF2ZS5kZWVwLnByb3BlcnR5KDEsIHJldmlld1sxXSkucHJvcGVydHkoJ3VzZXJJZCcpLmVxbCgnOCcpO1xuLy8gICAgICAgICAgIHJlcy5ib2R5LlJldmlld3Muc2hvdWxkLmhhdmUuZGVlcC5wcm9wZXJ0eSgxLCByZXZpZXdbMV0pLnByb3BlcnR5KCdidXNpbmVzc0lkJykuZXFsKCcyJyk7XG4vLyAgICAgICAgICAgcmVzLmJvZHkuZXJyb3Iuc2hvdWxkLmJlLmVxbChmYWxzZSk7XG4vLyAgICAgICAgICAgZG9uZSgpO1xuLy8gICAgICAgICB9KTtcbi8vICAgICB9KTtcbi8vXG4vL1xuLy8gICAgIGl0KCdpdCBzaG91bGQgR0VUIGVtcHR5IHJldmlld3MgaWYgcmV2aWV3cyBkb2VzIG5vdCBleGlzdHMnLCAoZG9uZSkgPT4ge1xuLy8gICAgICAgY29uc3QgcmV2aWV3ID0gW1xuLy8gICAgICAgICB7XG4vLyAgICAgICAgICAgaWQ6IDEsXG4vLyAgICAgICAgICAgdXNlcklkOiAnMycsXG4vLyAgICAgICAgICAgYnVzaW5lc3NJZDogJzInLFxuLy8gICAgICAgICB9LFxuLy8gICAgICAgICB7XG4vLyAgICAgICAgICAgaWQ6IDcsXG4vLyAgICAgICAgICAgdXNlcklkOiAnOCcsXG4vLyAgICAgICAgICAgYnVzaW5lc3NJZDogJzInLFxuLy8gICAgICAgICB9LFxuLy8gICAgICAgXTtcbi8vXG4vLyAgICAgICAvLyBQYXNzaW5nIHJldmlldyB0byByZXZpZXcgbW9kZWxcbi8vICAgICAgIFJldmlld3MucHVzaChyZXZpZXdbMF0pO1xuLy8gICAgICAgUmV2aWV3cy5wdXNoKHJldmlld1sxXSk7XG4vLyAgICAgICBjaGFpLnJlcXVlc3QoYXBwKVxuLy8gICAgICAgICAuZ2V0KCcvdjEvYnVzaW5lc3Nlcy8xL3Jldmlld3MnKVxuLy8gICAgICAgICAuZW5kKChlcnIsIHJlcykgPT4ge1xuLy8gICAgICAgICAgIHJlcy5zaG91bGQuaGF2ZS5zdGF0dXMoMjAwKTtcbi8vICAgICAgICAgICByZXMuYm9keS5SZXZpZXdzLnNob3VsZC5iZS5hKCdhcnJheScpO1xuLy8gICAgICAgICAgIHJlcy5ib2R5LnNob3VsZC5oYXZlLnByb3BlcnR5KCdSZXZpZXdzJyk7XG4vLyAgICAgICAgICAgcmVzLmJvZHkuUmV2aWV3cy5sZW5ndGguc2hvdWxkLmJlLmVxbCgwKTtcbi8vICAgICAgICAgICByZXMuYm9keS5lcnJvci5zaG91bGQuYmUuZXFsKGZhbHNlKTtcbi8vICAgICAgICAgICBkb25lKCk7XG4vLyAgICAgICAgIH0pO1xuLy8gICAgIH0pO1xuLy8gICB9KTtcbi8vXG4vLyAgIGRlc2NyaWJlKCcvUE9TVCByZXZpZXcnLCAoKSA9PiB7XG4vLyAgICAgaXQoJ2l0IHNob3VsZCBub3QgUE9TVCBhIHJldmlldyB3aXRob3V0IGEgcmVzcG9uc2UsIHVzZXJJZCwgYnVzaW5lc3NJZCcsIChkb25lKSA9PiB7XG4vLyAgICAgICBjb25zdCByZXZpZXcgPSB7XG4vLyAgICAgICAgIGlkOiAxLFxuLy8gICAgICAgICByZXNwb25zZTogJycsXG4vLyAgICAgICAgIHVzZXJJZDogJycsXG4vLyAgICAgICAgIGJ1c2luZXNzSWQ6ICcnLFxuLy8gICAgICAgfTtcbi8vXG4vLyAgICAgICBjaGFpLnJlcXVlc3QoYXBwKVxuLy8gICAgICAgICAucG9zdCgnL3YxL2J1c2luZXNzZXMvMi9yZXZpZXdzJylcbi8vICAgICAgICAgLnNlbmQocmV2aWV3KVxuLy8gICAgICAgICAuZW5kKChlcnIsIHJlcykgPT4ge1xuLy8gICAgICAgICAgIHJlcy5zaG91bGQuaGF2ZS5zdGF0dXMoMjA2KTtcbi8vICAgICAgICAgICByZXMuYm9keS5zaG91bGQuYmUuYSgnb2JqZWN0Jyk7XG4vLyAgICAgICAgICAgcmVzLmJvZHkuc2hvdWxkLmhhdmUucHJvcGVydHkoJ21lc3NhZ2UnKS5lcWwoJ0luY29tcGxldGUgZmllbGQnKTtcbi8vICAgICAgICAgICByZXMuYm9keS5zaG91bGQuaGF2ZS5wcm9wZXJ0eSgnZXJyb3InKS5lcWwodHJ1ZSk7XG4vLyAgICAgICAgICAgZG9uZSgpO1xuLy8gICAgICAgICB9KTtcbi8vICAgICB9KTtcbi8vXG4vLyAgICAgaXQoJ2l0IHNob3VsZCBwb3N0IGEgcmV2aWV3JywgKGRvbmUpID0+IHtcbi8vICAgICAgIGNvbnN0IHJldmlldyA9IHtcbi8vICAgICAgICAgaWQ6IDEsXG4vLyAgICAgICAgIHJlc3BvbnNlOiAndmVyeSBnb29kLicsXG4vLyAgICAgICAgIHVzZXJJZDogJzMnLFxuLy8gICAgICAgICBidXNpbmVzc0lkOiAnMicsXG4vLyAgICAgICB9O1xuLy9cbi8vICAgICAgIGNoYWkucmVxdWVzdChhcHApXG4vLyAgICAgICAgIC5wb3N0KCcvdjEvYnVzaW5lc3Nlcy8yL3Jldmlld3MnKVxuLy8gICAgICAgICAuc2VuZChyZXZpZXcpXG4vLyAgICAgICAgIC5lbmQoKGVyciwgcmVzKSA9PiB7XG4vLyAgICAgICAgICAgcmVzLnNob3VsZC5oYXZlLnN0YXR1cygyMDEpO1xuLy8gICAgICAgICAgIHJlcy5ib2R5LnNob3VsZC5iZS5hKCdvYmplY3QnKTtcbi8vICAgICAgICAgICByZXMuYm9keS5zaG91bGQuaGF2ZS5wcm9wZXJ0eSgnUmV2aWV3cycpO1xuLy8gICAgICAgICAgIHJlcy5ib2R5LlJldmlld3Muc2hvdWxkLmhhdmUucHJvcGVydHkoJ2lkJykuZXFsKDEpO1xuLy8gICAgICAgICAgIHJlcy5ib2R5LlJldmlld3Muc2hvdWxkLmhhdmUucHJvcGVydHkoJ3Jlc3BvbnNlJykuZXFsKCd2ZXJ5IGdvb2QuJyk7XG4vLyAgICAgICAgICAgcmVzLmJvZHkuUmV2aWV3cy5zaG91bGQuaGF2ZS5wcm9wZXJ0eSgndXNlcklkJykuZXFsKCczJyk7XG4vLyAgICAgICAgICAgcmVzLmJvZHkuUmV2aWV3cy5zaG91bGQuaGF2ZS5wcm9wZXJ0eSgnYnVzaW5lc3NJZCcpLmVxbCgnMicpO1xuLy8gICAgICAgICAgIHJlcy5ib2R5LnNob3VsZC5oYXZlLnByb3BlcnR5KCdtZXNzYWdlJykuZXFsKCdTdWNjZXNzJyk7XG4vLyAgICAgICAgICAgcmVzLmJvZHkuc2hvdWxkLmhhdmUucHJvcGVydHkoJ2Vycm9yJykuZXFsKGZhbHNlKTtcbi8vICAgICAgICAgICBkb25lKCk7XG4vLyAgICAgICAgIH0pO1xuLy8gICAgIH0pO1xuLy8gICB9KTtcbi8vIH0pO1xuIl19
var cov_22pak15x2p=function(){var path="/home/somto/Andela/We-Connect/server/test/reviews-spec.js",hash="eeee466a34e6bdcb6fb6c69e35fdbf1c3da09ef2",Function=function(){}.constructor,global=new Function('return this')(),gcv="__coverage__",coverageData={path:"/home/somto/Andela/We-Connect/server/test/reviews-spec.js",statementMap:{},fnMap:{},branchMap:{},s:{},f:{},b:{},_coverageSchema:"d34fc3e6b8297bcde183f5492bcb8fcb36775295"},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();