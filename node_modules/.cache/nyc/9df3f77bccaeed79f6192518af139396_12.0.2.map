{"version":3,"sources":["reviews-spec.js"],"names":["process","env","NODE_ENV"],"mappings":";;AAAA;AACAA,QAAQC,GAAR,CAAYC,QAAZ,GAAuB,MAAvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"reviews-spec.js","sourceRoot":"/home/somto/Andela/We-Connect/server/test","sourcesContent":["//During the test the env variable is set to test\nprocess.env.NODE_ENV = 'test';\n//\n// // Require the dev-dependencies\n// import chai from 'chai';\n// import chaiHttp from 'chai-http';\n//\n// import Reviews from '../server/models/review';\n// import app from '../app';\n//\n// chai.should();\n// chai.use(chaiHttp);\n//\n//\n// describe('Reviews', () => {\n//   beforeEach((done) => { // Before each test we empty the database\n//     Reviews.splice(0, Reviews.length);\n//     done();\n//   });\n//\n//   describe('/GET review', () => {\n//     it('it should GET empty reviews', (done) => {\n//       chai.request(app)\n//         .get('/v1/businesses/1/reviews')\n//         .end((err, res) => {\n//           res.should.have.status(200);\n//           res.body.Reviews.should.be.a('array');\n//           res.body.should.have.property('Reviews');\n//           res.body.Reviews.length.should.be.eql(0);\n//           res.body.error.should.be.eql(false);\n//           done();\n//         });\n//     });\n//     it('it should GET all the reviews', (done) => {\n//       const review = [\n//         {\n//           id: 1,\n//           userId: '3',\n//           businessId: '2',\n//         },\n//         {\n//           id: 7,\n//           userId: '8',\n//           businessId: '2',\n//         },\n//       ];\n//\n//       // Passing review to review model\n//       Reviews.push(review[0]);\n//       Reviews.push(review[1]);\n//       chai.request(app)\n//         .get('/v1/businesses/2/reviews')\n//         .end((err, res) => {\n//           res.should.have.status(200);\n//           res.body.Reviews.should.be.a('array');\n//           res.body.should.have.property('Reviews');\n//           res.body.Reviews.should.have.deep.property(0, review[0]).property('id').eql(1);\n//           res.body.Reviews.should.have.deep.property(0, review[0]).property('userId').eql('3');\n//           res.body.Reviews.should.have.deep.property(0, review[0]).property('businessId').eql('2');\n//           res.body.Reviews.should.have.deep.property(1, review[1]).property('id').eql(7);\n//           res.body.Reviews.should.have.deep.property(1, review[1]).property('userId').eql('8');\n//           res.body.Reviews.should.have.deep.property(1, review[1]).property('businessId').eql('2');\n//           res.body.error.should.be.eql(false);\n//           done();\n//         });\n//     });\n//\n//\n//     it('it should GET empty reviews if reviews does not exists', (done) => {\n//       const review = [\n//         {\n//           id: 1,\n//           userId: '3',\n//           businessId: '2',\n//         },\n//         {\n//           id: 7,\n//           userId: '8',\n//           businessId: '2',\n//         },\n//       ];\n//\n//       // Passing review to review model\n//       Reviews.push(review[0]);\n//       Reviews.push(review[1]);\n//       chai.request(app)\n//         .get('/v1/businesses/1/reviews')\n//         .end((err, res) => {\n//           res.should.have.status(200);\n//           res.body.Reviews.should.be.a('array');\n//           res.body.should.have.property('Reviews');\n//           res.body.Reviews.length.should.be.eql(0);\n//           res.body.error.should.be.eql(false);\n//           done();\n//         });\n//     });\n//   });\n//\n//   describe('/POST review', () => {\n//     it('it should not POST a review without a response, userId, businessId', (done) => {\n//       const review = {\n//         id: 1,\n//         response: '',\n//         userId: '',\n//         businessId: '',\n//       };\n//\n//       chai.request(app)\n//         .post('/v1/businesses/2/reviews')\n//         .send(review)\n//         .end((err, res) => {\n//           res.should.have.status(206);\n//           res.body.should.be.a('object');\n//           res.body.should.have.property('message').eql('Incomplete field');\n//           res.body.should.have.property('error').eql(true);\n//           done();\n//         });\n//     });\n//\n//     it('it should post a review', (done) => {\n//       const review = {\n//         id: 1,\n//         response: 'very good.',\n//         userId: '3',\n//         businessId: '2',\n//       };\n//\n//       chai.request(app)\n//         .post('/v1/businesses/2/reviews')\n//         .send(review)\n//         .end((err, res) => {\n//           res.should.have.status(201);\n//           res.body.should.be.a('object');\n//           res.body.should.have.property('Reviews');\n//           res.body.Reviews.should.have.property('id').eql(1);\n//           res.body.Reviews.should.have.property('response').eql('very good.');\n//           res.body.Reviews.should.have.property('userId').eql('3');\n//           res.body.Reviews.should.have.property('businessId').eql('2');\n//           res.body.should.have.property('message').eql('Success');\n//           res.body.should.have.property('error').eql(false);\n//           done();\n//         });\n//     });\n//   });\n// });\n"]}