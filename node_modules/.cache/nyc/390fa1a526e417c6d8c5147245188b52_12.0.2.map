{"version":3,"sources":["reviews-spec.js"],"names":["process","env","NODE_ENV","chai","should","request","app","Review","model","describe","beforeEach","done","destroy","where","force","then","it","get","end","err","res","have","status","body","be","a","length","eql","User","create","title","firstname","lastname","username","password","email","gender","street","city","state","country","dob","phone","userImage","Business","businessName","description","datefound","category","companyImage","userId","user","dataValues","id","response","businessId","business"],"mappings":"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","file":"reviews-spec.js","sourceRoot":"/home/somto/Andela/We-Connect/server/test","sourcesContent":["//During the test the env variable is set to test\nprocess.env.NODE_ENV = 'test';\n\n// Require the dev-dependencies\nimport chai from 'chai';\nimport supertest from 'supertest';\n\nimport model from '../server/models';\nimport app from '../app';\n\nchai.should();\nconst request = supertest(app);\nconst Review = model.Review;\n\n\ndescribe('Reviews', () => {\n  beforeEach((done) => { // Before each test we empty the database\n    Review.destroy({where: {}, force: true}).then(() => done());\n  });\n\n  describe('/GET review', () => {\n    it('it should GET empty reviews', (done) => {\n      request\n        .get('/v1/businesses/1/reviews')\n        .end((err, res) => {\n          res.should.have.status(200);\n          res.body.should.be.a('array');\n          res.body.length.should.be.eql(0);\n          done();\n        });\n    });\n//     it('it should GET all the reviews', (done) => {\n//       const review = [\n//         {\n//           id: 1,\n//           userId: '3',\n//           businessId: '2',\n//         },\n//         {\n//           id: 7,\n//           userId: '8',\n//           businessId: '2',\n//         },\n//       ];\n//\n//       // Passing review to review model\n//       Reviews.push(review[0]);\n//       Reviews.push(review[1]);\n//       chai.request(app)\n//         .get('/v1/businesses/2/reviews')\n//         .end((err, res) => {\n//           res.should.have.status(200);\n//           res.body.Reviews.should.be.a('array');\n//           res.body.should.have.property('Reviews');\n//           res.body.Reviews.should.have.deep.property(0, review[0]).property('id').eql(1);\n//           res.body.Reviews.should.have.deep.property(0, review[0]).property('userId').eql('3');\n//           res.body.Reviews.should.have.deep.property(0, review[0]).property('businessId').eql('2');\n//           res.body.Reviews.should.have.deep.property(1, review[1]).property('id').eql(7);\n//           res.body.Reviews.should.have.deep.property(1, review[1]).property('userId').eql('8');\n//           res.body.Reviews.should.have.deep.property(1, review[1]).property('businessId').eql('2');\n//           res.body.error.should.be.eql(false);\n//           done();\n//         });\n//     });\n\n\n    it('it should GET empty reviews if reviews does not exists', (done) => {\n\n      User.create({\n            title: 'mr',\n            firstname: 'somto',\n            lastname: 'Ikwuoma',\n            username: 'sommy',\n            password: '123',\n            email: 'somto@gmail.com',\n            gender: 'male',\n            street: 'ljan terrasse 346',\n            city: 'ikotun',\n            state: 'lagos',\n            country: 'Nigeria',\n            dob: '2015-11-04',\n            phone: '66976498',\n            userImage: 'usersUploads/testFile.png'\n          })\n          .then(user => {\n\n            Business.create({\n              businessName: 'Sommy1',\n              description: 'We produce quality products',\n              street: '4 jvjvkjvj, kfkjfj',\n              city: 'Sinner',\n              state: 'Lagos',\n              country: 'Nigeria',\n              datefound: '2015-11-04',\n              email: 'wecon@bfbf.b',\n              phone: '34165448',\n              category: 'Production',\n              companyImage: '',\n              userId: user.dataValues.id,\n            }).then(business => {\n\n\n              Review.create({\n                response: 1,\n                userId: user.dataValues.id,\n                businessId: business.dataValues.id,\n              })\n\n              request\n                .get('/v1/businesses/1/reviews')\n                .end((err, res) => {\n                  res.should.have.status(200);\n                  res.body.should.be.a('array');\n                  res.body.length.should.be.eql(0);\n                  done();\n                });\n              });\n            });\n          });\n      });\n//\n//   describe('/POST review', () => {\n//     it('it should not POST a review without a response, userId, businessId', (done) => {\n//       const review = {\n//         id: 1,\n//         response: '',\n//         userId: '',\n//         businessId: '',\n//       };\n//\n//       chai.request(app)\n//         .post('/v1/businesses/2/reviews')\n//         .send(review)\n//         .end((err, res) => {\n//           res.should.have.status(206);\n//           res.body.should.be.a('object');\n//           res.body.should.have.property('message').eql('Incomplete field');\n//           res.body.should.have.property('error').eql(true);\n//           done();\n//         });\n//     });\n//\n//     it('it should post a review', (done) => {\n//       const review = {\n//         id: 1,\n//         response: 'very good.',\n//         userId: '3',\n//         businessId: '2',\n//       };\n//\n//       chai.request(app)\n//         .post('/v1/businesses/2/reviews')\n//         .send(review)\n//         .end((err, res) => {\n//           res.should.have.status(201);\n//           res.body.should.be.a('object');\n//           res.body.should.have.property('Reviews');\n//           res.body.Reviews.should.have.property('id').eql(1);\n//           res.body.Reviews.should.have.property('response').eql('very good.');\n//           res.body.Reviews.should.have.property('userId').eql('3');\n//           res.body.Reviews.should.have.property('businessId').eql('2');\n//           res.body.should.have.property('message').eql('Success');\n//           res.body.should.have.property('error').eql(false);\n//           done();\n//         });\n//     });\n//   });\n});\n"]}