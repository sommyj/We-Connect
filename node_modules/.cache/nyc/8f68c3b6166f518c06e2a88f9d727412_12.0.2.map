{"version":3,"sources":["businesses.js"],"names":["model","Business","Review","upload","dest","fileSizeLimit","renameFile","tempPath","targetPath","fs","rename","err","deleteFile","unlink","fileTypeHandleError","res","status","json","message","error","fileSizeHandleError","createObject","businessName","req","body","description","street","city","state","country","datefound","email","phone","category","companyImage","filePath","userId","updateObject","business","businessesController","single","create","file","path","Date","toISOString","originalname","mimetype","size","substring","length","send","then","catch","update","findById","params","businessId","include","as","previousImage","businessForUpdate","destroy","retrieve","list","selectionType","query","location","findAll","where"],"mappings":"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","file":"businesses.js","sourceRoot":"/home/somto/Andela/We-Connect/server/server/controllers","sourcesContent":["import multer from 'multer';\nimport fs from 'file-system';\nimport model from '../models';\n\nconst [Business, Review] = [model.Business, model.Review];\n\nconst upload = multer({\n  dest: './businessesUploads/'\n});\n\nconst fileSizeLimit = 1024 * 1024 * 2;\n\n/**\n * rename file to an appropriate name\n * @param {String} tempPath The temporary path name.\n * @param {String} targetPath The target path name.\n * @returns {void} nothing.\n */\nconst renameFile = (tempPath, targetPath) => {\n  fs.rename(tempPath, targetPath, (err) => {\n    if (err) throw err;\n  });\n};\n\n/**\n * delete a file\n * @param {String} targetPath The part to delete from\n * @returns {void} nothing.\n */\nconst deleteFile = (targetPath) => {\n  fs.unlink(targetPath, (err) => {\n    if (err) throw err;\n  });\n};\n\n// file type handleError\nconst fileTypeHandleError = (res) => {\n  res.status(403).json({ message: 'Only .png and .jpg files are allowed!', error: true });\n};\n\n// file size handleError\nconst fileSizeHandleError = (res) => {\n  res.status(403).json({ message: 'file should not be more than 2mb!', error: true });\n};\nconst createObject = {\n  businessName: req.body.businessName,\n  description: req.body.description,\n  street: req.body.street,\n  city: req.body.city,\n  state: req.body.state,\n  country: req.body.country,\n  datefound: req.body.datefound,\n  email: req.body.email,\n  phone: req.body.phone,\n  category: req.body.category,\n  companyImage: filePath,\n  userId: req.body.userId,\n};\nconst updateObject = {\n  businessName: req.body.businessName || business.businessName,\n  description: req.body.description || business.description,\n  street: req.body.street || business.street,\n  city: req.body.city || business.city,\n  state: req.body.state || business.state,\n  country: req.body.country || business.country,\n  datefound: req.body.datefound || business.datefound,\n  email: req.body.email || business.email,\n  phone: req.body.phone || business.phone,\n  category: req.body.category || business.category,\n  companyImage: filePath || business.companyImage,\n  userId: req.body.userId || business.userId,\n};\n\nconst businessesController = {\n  // image upload\n  upload: upload.single('companyImage'),\n  // create a business\n  create(req, res) {\n    let filePath = '';\n    if (req.file) {\n      const tempPath = `./${req.file.path}`;\n      const targetPath = `./businessesUploads/${new Date().toISOString() + req.file.originalname}`;\n      if (req.file.mimetype === 'image/jpeg' || req.file.mimetype === 'image/png') {\n        if (req.file.size <= fileSizeLimit) { renameFile(tempPath, targetPath);\n          // remove the dot in targetPath\n          filePath = targetPath.substring(1, targetPath.length);\n        } else { deleteFile(tempPath);\n          return fileSizeHandleError(res);\n        }\n      } else { deleteFile(tempPath);\n        return fileTypeHandleError(res);\n      }\n    }\n    if (!req.body.businessName || !req.body.userId || !req.body.description ||\n      !req.body.email || !req.body.phone || !req.body.category) {\n      if (filePath) { deleteFile(`./${filePath}`); }\n      return res.status(206).send({ message: 'Incomplete fields' });\n    }\n    return Business\n      .create(createObject)\n      .then(business => res.status(201).send(business))\n      .catch((error) => {\n        if (filePath) { deleteFile(`./${filePath}`); }\n        return res.status(400).send(error);\n      });\n  },\n  // update business\n  update(req, res) {\n    let filePath = '';\n    if (req.file) {\n      const tempPath = `./${req.file.path}`;\n      const targetPath = `./businessesUploads/${new Date().toISOString() + req.file.originalname}`;\n      if (req.file.mimetype === 'image/jpeg' || req.file.mimetype === 'image/png') {\n        if (req.file.size <= fileSizeLimit) {\n          renameFile(tempPath, targetPath);\n          // remove the dot in targetPath\n          filePath = targetPath.substring(1, targetPath.length);\n        } else { deleteFile(tempPath);\n          return fileSizeHandleError(res);\n        }\n      } else { deleteFile(tempPath);\n        return fileTypeHandleError(res);\n      }\n    }\n    \n    return Business\n      .findById(req.params.businessId, {\n        include: [{ model: Review, as: 'reviews' }]\n      })\n      .then((business) => {\n        if (!business) {\n          // if file and url is not empty delete img for updation\n          if (filePath) { deleteFile(`./${filePath}`); }\n          return res.status(404).send({ message: 'Business not found' });\n        }\n        // holds the url of the image before update in other not to loose it\n        const previousImage = business.companyImage;\n\n        return business\n          .update(updateObject)\n          .then((businessForUpdate) => {\n            // if file and url is not empty delete img for updation\n            if (filePath) {\n              if (previousImage) {\n                deleteFile(`./${previousImage}`);\n              }\n            }\n            return res.status(200).send(businessForUpdate);\n          }).catch((error) => {\n            if (filePath) { deleteFile(`./${filePath}`); }\n            return res.status(400).send(error);\n          });\n      }).catch(error => res.status(400).send(error));\n  },\n  // delete business\n  destroy(req, res) {\n    return Business\n      .findById(req.params.businessId)\n      .then((business) => {\n        if (!business) {\n          return res.status(404).send({ message: 'Business not found' });\n        }\n        return business\n          .destroy()\n          .then(() => {\n            if (business.companyImage) {\n              deleteFile(`./${business.companyImage}`);\n            }\n            return res.status(204).send();\n          })\n          .catch(error => res.status(400).send(error));\n      }).catch(error => res.status(400).send(error));\n  },\n  // get a business\n  retrieve(req, res) {\n    return Business\n      .findById(req.params.businessId, {\n        include: [{\n          model: Review,\n          as: 'reviews'\n        }]\n      })\n      .then((business) => {\n        if (!business) {\n          return res.status(404).send({ message: 'Business not found' });\n        }\n        return res.status(200).send(business);\n      })\n      .catch(error => res.status(400).send(error));\n  },\n  // get businesses\n  list(req, res) {\n    let selectionType;\n    if (!req.query.location && !req.query.category) {\n      selectionType = Business\n        .findAll({\n          include: [{ model: Review, as: 'reviews' }]\n        });\n    }\n    if (req.query.location && !req.query.category) {\n      selectionType = Business\n        .findAll({\n          where: { country: req.query.location },\n          include: [{ model: Review, as: 'reviews' }]\n        });\n    }\n    if (!req.query.location && req.query.category) {\n      selectionType = Business\n        .findAll({\n          where: { category: req.query.category },\n          include: [{ model: Review, as: 'reviews' }]\n        });\n    }\n    if (req.query.location && req.query.category) {\n      selectionType = Business\n        .findAll({\n          where: { country: req.query.location, category: req.query.category },\n          include: [{ model: Review, as: 'reviews' }]\n        });\n    }\n    return selectionType\n      .then((business) => {\n        if (business.length === 0) {\n          return res.status(404).send({ message: 'Businesses not found' });\n        }\n        return res.status(200).send(business);\n      })\n      .catch(error => res.status(400).send(error));\n  },\n};\n\nexport default businessesController;\n"]}