{"version":3,"sources":["users.js"],"names":["model","User","Business","upload","dest","fileSizeLimit","renameFile","tempPath","targetPath","fs","rename","err","deleteFile","unlink","fileTypeHandleError","res","status","json","message","error","fileSizeHandleError","fileFilter","req","filePath","file","path","Date","toISOString","originalname","mimetype","size","substring","length","usersController","single","create","body","title","firstname","lastname","username","password","email","gender","dob","phone","send","street","city","state","country","userImage","then","user","catch","check","findOne","where","list","findAll","include","as","users","update","findById","params","userId","previousImage","userUpdate","destroy","retrieve"],"mappings":"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","file":"users.js","sourceRoot":"/home/somto/Andela/We-Connect/server/server/controllers","sourcesContent":["import multer from 'multer';\nimport fs from 'file-system';\nimport model from '../models';\n\nconst [User, Business] = [model.User, model.Business];\n\nconst upload = multer({\n  dest: './usersUploads/'\n});\n\nconst fileSizeLimit = 1024 * 1024 * 2;\n\n/**\n * rename file to an appropriate name\n * @param {String} tempPath The temporary path name.\n * @param {String} targetPath The target path name.\n * @returns {void} nothing.\n */\nconst renameFile = (tempPath, targetPath) => {\n  fs.rename(tempPath, targetPath, (err) => {\n    if (err) throw err;\n  });\n};\n\n/**\n * delete a file\n * @param {String} targetPath The part to delete from\n * @returns {void} nothing.\n */\nconst deleteFile = (targetPath) => {\n  fs.unlink(targetPath, (err) => {\n    if (err) throw err;\n  });\n};\n\n// file type handleError\nconst fileTypeHandleError = (res) => {\n  res.status(403).json({ message: 'Only .png and .jpg files are allowed!', error: true });\n};\n\n// file size handleError\nconst fileSizeHandleError = (res) => {\n  res.status(403).json({ message: 'file should not be more than 2mb!', error: true });\n};\n\n// Filters the file size and type.\nconst fileFilter = (req, res, filePath) => {\n  if (req.file) {\n    const tempPath = `./${req.file.path}`;\n    const targetPath = `./usersUploads/${new Date().toISOString() + req.file.originalname}`;\n    if (req.file.mimetype === 'image/jpeg' || req.file.mimetype === 'image/png') {\n      if (req.file.size <= fileSizeLimit) {\n        renameFile(tempPath, targetPath);\n      } else {\n        deleteFile(tempPath);\n        fileSizeHandleError(res);\n      }\n    } else {\n      deleteFile(tempPath);\n      fileTypeHandleError(res);\n    }\n    // remove the dot in targetPath\n    filePath = targetPath.substring(1, targetPath.length);\n  }\n  return filePath;\n};\n\nconst usersController = {\n  // image upload\n  upload: upload.single('userImage'),\n  // create a user\n  create(req, res) {\n    //File size and type filter.\n    const filePath = fileFilter(req, res);\n\n    if (!req.body.title || !req.body.firstname || !req.body.lastname ||\n      !req.body.username || !req.body.password || !req.body.email ||\n      !req.body.gender || !req.body.dob || !req.body.phone) {\n      if (filePath) { deleteFile(`./${filePath}`); }\n      return res.status(206).send({ message: 'Incomplete field' });\n    }\n\n    return User\n      .create({\n        title: req.body.title,\n        firstname: req.body.firstname,\n        lastname: req.body.lastname,\n        username: req.body.username,\n        password: req.body.password,\n        email: req.body.email,\n        gender: req.body.gender,\n        street: req.body.street,\n        city: req.body.city,\n        state: req.body.state,\n        country: req.body.country,\n        dob: req.body.dob,\n        phone: req.body.phone,\n        userImage: filePath\n      })\n      .then(user => res.status(201).send(user))\n      .catch((error) => {\n        if (filePath) {\n          deleteFile(`./${filePath}`);\n        }\n        return res.status(400).send(error);\n      });\n  },\n  // login with username and password\n  check(req, res) {\n    return User\n      .findOne({ where: { username: req.body.username, password: req.body.password } })\n      .then((user) => {\n        if (!user) {\n          return res.status(404).send({ message: 'User not found' });\n        }\n        return res.status(200).send(user);\n      })\n      .catch(error => res.status(400).send(error));\n  },\n  list(req, res) {\n    return User\n      .findAll({\n        include: [{\n          model: Business,\n          as: 'businesses',\n        }],\n      })\n      .then(users => res.status(200).send(users))\n      .catch(error => res.status(400).send(error));\n  },\n  // update user\n  update(req, res) {\n    //File size and type filter.\n    const filePath = fileFilter(req, res);\n\n    return User\n      .findById(req.params.userId, {\n        include: [{\n          model: Business,\n          as: 'businesses'\n        }]\n      })\n      .then((user) => {\n        if (!user) {\n          // if file and url is not empty delete img for updation\n          if (filePath) {\n            deleteFile(`./${filePath}`);\n          }\n          return res.status(404).send({ message: 'User not found' });\n        }\n        // holds the url of the image before update in other not to loose it\n        const previousImage = user.userImage;\n        return user\n          .update({\n            title: req.body.title || user.title,\n            firstname: req.body.firstname || user.firstname,\n            lastname: req.body.lastname || user.lastname,\n            username: req.body.username || user.username,\n            password: req.body.password || user.password,\n            email: req.body.email || user.email,\n            gender: req.body.gender || user.gender,\n            street: req.body.street || user.street,\n            city: req.body.city || user.city,\n            state: req.body.state || user.state,\n            country: req.body.country || user.country,\n            dob: req.body.dob || user.dob,\n            phone: req.body.phone || user.phone,\n            userImage: filePath || user.userImage,\n          })\n          .then((userUpdate) => {\n            // if file and url is not empty delete img for updation\n            if (filePath) {\n              if (previousImage) {\n                deleteFile(`./${previousImage}`);\n              }\n            }\n            return res.status(200).send(userUpdate);\n          }) // Send back the updated user\n          .catch((error) => {\n            if (filePath) {\n              deleteFile(`./${filePath}`);\n            }\n            return res.status(400).send(error);\n          });\n      }).catch(error => res.status(400).send(error));\n  },\n  // delete user\n  destroy(req, res) {\n    return User\n      .findById(req.params.userId)\n      .then((user) => {\n        if (!user) {\n          return res.status(404).send({ message: 'User not found' });\n        }\n\n        return user\n          .destroy()\n          .then(() => {\n            if (user.userImage) {\n              deleteFile(`./${user.userImage}`);\n            }\n            return res.status(204).send();\n          })\n          .catch(error => res.status(400).send(error));\n      }).catch(error => res.status(400).send(error));\n  },\n  // get a user\n  retrieve(req, res) {\n    return User\n      .findById(req.params.userId, {\n        include: [{\n          model: Business,\n          as: 'businesses'\n        }]\n      })\n      .then((user) => {\n        if (!user) {\n          return res.status(404).send({ message: 'User not found' });\n        }\n        return res.status(200).send(user);\n      })\n      .catch(error => res.status(400).send(error));\n  },\n};\n\nexport default usersController;\n"]}