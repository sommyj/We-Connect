{"version":3,"sources":["index.js"],"names":["basename","path","__filename","env","process","NODE_ENV","db","config","sequelize","use_env_variable","Sequelize","database","username","password","fs","readdirSync","__dirname","filter","file","indexOf","slice","forEach","model","import","join","name","Object","keys","modelName","associate"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,WAAWC,eAAKD,QAAL,CAAcE,UAAd,CAAjB;AACA,IAAMC,MAAMC,QAAQD,GAAR,CAAYE,QAAZ,IAAwB,aAApC;AACA,IAAMC,KAAK,EAAX;;AAEAC,iBAAOJ,GAAP;;AAEA,IAAIK,kBAAJ;AACA,IAAID,iBAAOE,gBAAX,EAA6B;AAC3BD,cAAY,IAAIE,mBAAJ,CAAcN,QAAQD,GAAR,CAAYI,iBAAOE,gBAAnB,CAAd,EAAoDF,gBAApD,CAAZ;AACD,CAFD,MAEO;AACLC,cAAY,IAAIE,mBAAJ,CAAcH,iBAAOI,QAArB,EAA+BJ,iBAAOK,QAAtC,EAAgDL,iBAAOM,QAAvD,EAAiEN,gBAAjE,CAAZ;AACD;;AAEDO,aACGC,WADH,CACeC,SADf,EAEGC,MAFH,CAEU;AAAA,SACLC,KAAKC,OAAL,CAAa,GAAb,MAAsB,CAAvB,IAA8BD,SAASlB,QAAvC,IAAqDkB,KAAKE,KAAL,CAAW,CAAC,CAAZ,MAAmB,KADlE;AAAA,CAFV,EAIGC,OAJH,CAIW,UAACH,IAAD,EAAU;AACjB,MAAMI,QAAQd,UAAUe,MAAV,CAAiBtB,eAAKuB,IAAL,CAAUR,SAAV,EAAqBE,IAArB,CAAjB,CAAd;AACAZ,KAAGgB,MAAMG,IAAT,IAAiBH,KAAjB;AACD,CAPH;;AASAI,OAAOC,IAAP,CAAYrB,EAAZ,EAAgBe,OAAhB,CAAwB,UAACO,SAAD,EAAe;AACrC,MAAItB,GAAGsB,SAAH,EAAcC,SAAlB,EAA6B;AAC3BvB,OAAGsB,SAAH,EAAcC,SAAd,CAAwBvB,EAAxB;AACD;AACF,CAJD;;AAMAA,GAAGE,SAAH,GAAeA,SAAf;AACAF,GAAGI,SAAH,GAAeA,mBAAf;;kBAEeJ,E","file":"index.js","sourceRoot":"/home/somto/Andela/We-Connect/server/server/models","sourcesContent":["import fs from 'fs';\nimport path from 'path';\nimport Sequelize from 'sequelize';\nimport config from './server/server/config/config.json';\n\nconst basename = path.basename(__filename);\nconst env = process.env.NODE_ENV || 'development';\nconst db = {};\n\nconfig[env];\n\nlet sequelize;\nif (config.use_env_variable) {\n  sequelize = new Sequelize(process.env[config.use_env_variable], config);\n} else {\n  sequelize = new Sequelize(config.database, config.username, config.password, config);\n}\n\nfs\n  .readdirSync(__dirname)\n  .filter(file =>\n    (file.indexOf('.') !== 0) && (file !== basename) && (file.slice(-3) === '.js'))\n  .forEach((file) => {\n    const model = sequelize.import(path.join(__dirname, file));\n    db[model.name] = model;\n  });\n\nObject.keys(db).forEach((modelName) => {\n  if (db[modelName].associate) {\n    db[modelName].associate(db);\n  }\n});\n\ndb.sequelize = sequelize;\ndb.Sequelize = Sequelize;\n\nexport default db;\n"]}