{"version":3,"sources":["users.js"],"names":["model","User","Business","upload","dest","fileSizeLimit","renameFile","tempPath","targetPath","fs","rename","err","deleteFile","unlink","fileTypeHandleError","res","status","json","message","error","fileSizeHandleError","tokenMethod","userId","token","jwt","sign","id","app","get","expiresIn","fileFilterMethod","req","fileErrorArray","fileSizeError","fileTypeError","filePath","file","path","Date","toISOString","originalname","mimetype","size","substring","length","usersController","single","create","fileFilterValues","body","title","firstname","lastname","username","password","email","gender","dob","phone","send","hashedPassword","bcrypt","hashSync","street","city","state","country","userImage","then","user","auth","catch","check","findOne","where","list","findAll","include","as","users","update","findById","params","previousImage","userUpdate","destroy","retrieve"],"mappings":"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","file":"users.js","sourceRoot":"/home/somto/1Projects/Andela/We-Connect/server/server/controllers","sourcesContent":["import multer from 'multer';\nimport fs from 'file-system';\nimport jwt from 'jsonwebtoken';\nimport bcrypt from 'bcryptjs';\nimport model from '../models';\nimport app from '../../app';\n\nconst [User, Business] = [model.User, model.Business];\n\nconst upload = multer({\n  dest: './usersUploads/'\n});\n\nconst fileSizeLimit = 1024 * 1024 * 2;\n\n/**\n * rename file to an appropriate name\n * @param {String} tempPath The temporary path name.\n * @param {String} targetPath The target path name.\n * @returns {void} nothing.\n */\nconst renameFile = (tempPath, targetPath) => {\n  fs.rename(tempPath, targetPath, (err) => {\n    if (err) throw err;\n  });\n};\n\n/**\n * delete a file\n * @param {String} targetPath The part to delete from\n * @returns {void} nothing.\n */\nconst deleteFile = (targetPath) => {\n  fs.unlink(targetPath, (err) => {\n    if (err) throw err;\n  });\n};\n\n// file type handleError\nconst fileTypeHandleError = (res) => {\n  res.status(403).json({ message: 'Only .png and .jpg files are allowed!', error: true });\n};\n\n// file size handleError\nconst fileSizeHandleError = (res) => {\n  res.status(403).json({ message: 'file should not be more than 2mb!', error: true });\n};\n\n// Token creation hanlder method\nconst tokenMethod = (userId) => {\n  const token = jwt.sign(\n    { id: userId }, app.get('superSecret'),\n    { expiresIn: 86400 }// expires in 24 hours\n  );\n  return token;\n};\n\n/* File filter handle method */\nconst fileFilterMethod = (req) => {\n  const fileErrorArray = [];\n  let fileSizeError = false;\n  let fileTypeError = false;\n  let filePath = '';\n\n  if (req.file) {\n    const tempPath = `./${req.file.path}`;\n    const targetPath = `./usersUploads/${new Date().toISOString() + req.file.originalname}`;\n    if (req.file.mimetype === 'image/jpeg' || req.file.mimetype === 'image/png') {\n      if (req.file.size <= fileSizeLimit) {\n        renameFile(tempPath, targetPath);\n        // remove the dot in targetPath\n        filePath = targetPath.substring(1, targetPath.length);\n      } else {\n        deleteFile(tempPath);\n        fileSizeError = true;\n      }\n    } else {\n      deleteFile(tempPath);\n      fileTypeError = true;\n    }\n  }\n  fileErrorArray[0] = fileSizeError;\n  fileErrorArray[1] = fileTypeError;\n  fileErrorArray[2] = filePath;\n\n  return fileErrorArray;\n};\n\n\nconst usersController = {\n  upload: upload.single('userImage'), // image upload\n  // create a user\n  create(req, res) {\n    // implementing the file filter method\n    const fileFilterValues = fileFilterMethod(req, res);\n    const fileSizeError = fileFilterValues[0];\n    const fileTypeError = fileFilterValues[1];\n    const filePath = fileFilterValues[2];\n\n    if (fileSizeError) return fileSizeHandleError(res);\n    if (fileTypeError) return fileTypeHandleError(res);\n\n    /* Required feilds */\n    if (!req.body.title || !req.body.firstname || !req.body.lastname ||\n      !req.body.username || !req.body.password || !req.body.email ||\n      !req.body.gender || !req.body.dob || !req.body.phone) {\n      if (filePath) { deleteFile(`./${filePath}`); }\n      return res.status(206).send({ message: 'Incomplete field' });\n    }\n\n    const hashedPassword = bcrypt.hashSync(req.body.password, 8);\n\n    return User\n      .create({\n        title: req.body.title,\n        firstname: req.body.firstname,\n        lastname: req.body.lastname,\n        username: req.body.username,\n        password: hashedPassword,\n        email: req.body.email,\n        gender: req.body.gender,\n        street: req.body.street,\n        city: req.body.city,\n        state: req.body.state,\n        country: req.body.country,\n        dob: req.body.dob,\n        phone: req.body.phone,\n        userImage: filePath\n      })\n      .then((user) => {\n        const token = tokenMethod(user.id); // Generate token\n        if (token) return res.status(201).send({ user, auth: true, token });\n      })\n      .catch((error) => {\n        if (filePath) deleteFile(`./${filePath}`);\n        return res.status(400).send(error);\n      });\n  },\n  // login with username and password\n  check(req, res) {\n    return User\n      .findOne({ where: { username: req.body.username, password: req.body.password } })\n      .then((user) => {\n        if (!user) return res.status(404).send({ message: 'User not found' });\n        const token = tokenMethod(user.id); // Generate token\n        if (token) return res.status(200).send({ user, auth: true, token });\n      })\n      .catch(error => res.status(400).send(error));\n  },\n  list(req, res) {\n    return User\n      .findAll({\n        include: [{ model: Business, as: 'businesses' }]\n      })\n      .then(users => res.status(200).send(users))\n      .catch(error => res.status(400).send(error));\n  },\n  // update user\n  update(req, res) {\n    // implementing the file filter method\n    const fileFilterValues = fileFilterMethod(req, res);\n    const fileSizeError = fileFilterValues[0];\n    const fileTypeError = fileFilterValues[1];\n    const filePath = fileFilterValues[2];\n\n    if (fileSizeError) return fileSizeHandleError(res);\n    if (fileTypeError) return fileTypeHandleError(res);\n\n    return User\n      .findById(req.params.userId, {\n        include: [{ model: Business, as: 'businesses' }]\n      })\n      .then((user) => {\n        if (!user) {\n          // if file and url is not empty delete img for updation\n          if (filePath) deleteFile(`./${filePath}`);\n          return res.status(404).send({ message: 'User not found' });\n        }\n        // holds the url of the image before update in other not to loose it\n        const previousImage = user.userImage;\n        return user\n          .update({\n            title: req.body.title || user.title,\n            firstname: req.body.firstname || user.firstname,\n            lastname: req.body.lastname || user.lastname,\n            username: req.body.username || user.username,\n            password: req.body.password || user.password,\n            email: req.body.email || user.email,\n            gender: req.body.gender || user.gender,\n            street: req.body.street || user.street,\n            city: req.body.city || user.city,\n            state: req.body.state || user.state,\n            country: req.body.country || user.country,\n            dob: req.body.dob || user.dob,\n            phone: req.body.phone || user.phone,\n            userImage: filePath || user.userImage,\n          })\n          .then((userUpdate) => {\n            // if file and url is not empty delete img for updation\n            if (filePath) {\n              if (previousImage) deleteFile(`./${previousImage}`);\n            }\n            return res.status(200).send(userUpdate);\n          }) // Send back the updated user\n          .catch((error) => {\n            if (filePath) deleteFile(`./${filePath}`);\n            return res.status(400).send(error);\n          });\n      }).catch(error => res.status(400).send(error));\n  },\n  // delete user\n  destroy(req, res) {\n    return User\n      .findById(req.params.userId)\n      .then((user) => {\n        if (!user) return res.status(404).send({ message: 'User not found' });\n\n        return user\n          .destroy()\n          .then(() => {\n            if (user.userImage) deleteFile(`./${user.userImage}`);\n            return res.status(204).send();\n          })\n          .catch(error => res.status(400).send(error));\n      }).catch(error => res.status(400).send(error));\n  },\n  // get a user\n  retrieve(req, res) {\n    return User\n      .findById(req.params.userId, {\n        include: [{ model: Business, as: 'businesses' }]\n      })\n      .then((user) => {\n        if (!user) return res.status(404).send({ message: 'User not found' });\n        return res.status(200).send(user);\n      })\n      .catch(error => res.status(400).send(error));\n  },\n};\n\nexport default usersController;\n"]}