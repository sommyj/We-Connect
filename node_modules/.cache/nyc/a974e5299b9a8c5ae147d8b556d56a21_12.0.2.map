{"version":3,"sources":["businesses.js"],"names":["model","Business","Review","upload","dest","fileSizeLimit","renameFile","tempPath","targetPath","fs","rename","err","deleteFile","unlink","fileTypeHandleError","res","status","json","message","error","fileSizeHandleError","businessesController","single","create","req","decodedID","token","body","query","headers","file","path","send","auth","jwt","verify","app","get","decoded","id","filePath","Date","toISOString","originalname","mimetype","size","substring","length","businessName","description","email","phone","category","street","city","state","country","datefound","companyImage","userId","then","business","catch","update","findById","params","businessId","include","as","previousImage","businessForUpdate","destroy","retrieve","list","selectionType","location","findAll","where"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;WAE2B,CAACA,iBAAMC,QAAP,EAAiBD,iBAAME,MAAvB,C;IAApBD,Q;IAAUC,M;;;AAEjB,IAAMC,SAAS,sBAAO;AACpBC,QAAM;AADc,CAAP,CAAf;;AAIA,IAAMC,gBAAgB,OAAO,IAAP,GAAc,CAApC;;AAEA;;;;;;AAMA,IAAMC,aAAa,SAAbA,UAAa,CAACC,QAAD,EAAWC,UAAX,EAA0B;AAC3CC,uBAAGC,MAAH,CAAUH,QAAV,EAAoBC,UAApB,EAAgC,UAACG,GAAD,EAAS;AACvC,QAAIA,GAAJ,EAAS,MAAMA,GAAN;AACV,GAFD;AAGD,CAJD;;AAMA;;;;;AAKA,IAAMC,aAAa,SAAbA,UAAa,CAACJ,UAAD,EAAgB;AACjCC,uBAAGI,MAAH,CAAUL,UAAV,EAAsB,UAACG,GAAD,EAAS;AAC7B,QAAIA,GAAJ,EAAS,MAAMA,GAAN;AACV,GAFD;AAGD,CAJD;;AAMA;AACA,IAAMG,sBAAsB,SAAtBA,mBAAsB,CAACC,GAAD,EAAS;AACnCA,MAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,uCAAX,EAAoDC,OAAO,IAA3D,EAArB;AACD,CAFD;;AAIA;AACA,IAAMC,sBAAsB,SAAtBA,mBAAsB,CAACL,GAAD,EAAS;AACnCA,MAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,mCAAX,EAAgDC,OAAO,IAAvD,EAArB;AACD,CAFD;;AAIA,IAAME,uBAAuB;AAC3B;AACAlB,UAAQA,OAAOmB,MAAP,CAAc,cAAd,CAFmB;AAG3B;AACAC,QAJ2B,kBAIpBC,GAJoB,EAIfT,GAJe,EAIV;AACf,QAAIU,kBAAJ;AACA;AACA,QAAMC,QAAQF,IAAIG,IAAJ,CAASD,KAAT,IAAkBF,IAAII,KAAJ,CAAUF,KAA5B,IAAqCF,IAAIK,OAAJ,CAAY,gBAAZ,CAAnD;AACA,QAAI,CAACH,KAAL,EAAY;AACV,UAAIF,IAAIM,IAAR,EAAc;AACdlB,0BAAgBY,IAAIM,IAAJ,CAASC,IAAzB;AACC;AACD,aAAOhB,IAAIC,MAAJ,CAAW,GAAX,EAAgBgB,IAAhB,CAAqB,EAAEC,MAAM,KAAR,EAAef,SAAS,oBAAxB,EAArB,CAAP;AACD;;AAED;AACAgB,2BAAIC,MAAJ,CAAWT,KAAX,EAAkBU,cAAIC,GAAJ,CAAQ,aAAR,CAAlB,EAA0C,UAAS1B,GAAT,EAAc2B,OAAd,EAAuB;AACjE,UAAI3B,GAAJ,EAAS,OAAOI,IAAIC,MAAJ,CAAW,GAAX,EAAgBgB,IAAhB,CAAqB,EAAEC,MAAM,KAAR,EAAef,SAAS,+BAAxB,EAArB,CAAP;AACPO,kBAAYa,QAAQC,EAApB;AACD,KAHD;;AAKA,QAAIC,WAAW,EAAf;AACA,QAAIhB,IAAIM,IAAR,EAAc;AACZ,UAAMvB,kBAAgBiB,IAAIM,IAAJ,CAASC,IAA/B;AACA,UAAMvB,uCAAoC,IAAIiC,IAAJ,GAAWC,WAAX,KAA2BlB,IAAIM,IAAJ,CAASa,YAAxE,CAAN;AACA,UAAInB,IAAIM,IAAJ,CAASc,QAAT,KAAsB,YAAtB,IAAsCpB,IAAIM,IAAJ,CAASc,QAAT,KAAsB,WAAhE,EAA6E;AAC3E,YAAIpB,IAAIM,IAAJ,CAASe,IAAT,IAAiBxC,aAArB,EAAoC;AAAEC,qBAAWC,QAAX,EAAqBC,UAArB;AACpC;AACAgC,qBAAWhC,WAAWsC,SAAX,CAAqB,CAArB,EAAwBtC,WAAWuC,MAAnC,CAAX;AACD,SAHD,MAGO;AAAEnC,qBAAWL,QAAX;AACP,iBAAOa,oBAAoBL,GAApB,CAAP;AACD;AACF,OAPD,MAOO;AAAEH,mBAAWL,QAAX;AACP,eAAOO,oBAAoBC,GAApB,CAAP;AACD;AACF;AACD,QAAI,CAACS,IAAIG,IAAJ,CAASqB,YAAV,IAA0B,CAACxB,IAAIG,IAAJ,CAASsB,WAApC,IACF,CAACzB,IAAIG,IAAJ,CAASuB,KADR,IACiB,CAAC1B,IAAIG,IAAJ,CAASwB,KAD3B,IACoC,CAAC3B,IAAIG,IAAJ,CAASyB,QADlD,EAC4D;AAC1D,UAAIZ,QAAJ,EAAc;AAAE5B,0BAAgB4B,QAAhB;AAA8B;AAC9C,aAAOzB,IAAIC,MAAJ,CAAW,GAAX,EAAgBgB,IAAhB,CAAqB,EAAEd,SAAS,mBAAX,EAArB,CAAP;AACD;;AAED,WAAOjB,SACJsB,MADI,CACG;AACNyB,oBAAcxB,IAAIG,IAAJ,CAASqB,YADjB;AAENC,mBAAazB,IAAIG,IAAJ,CAASsB,WAFhB;AAGNI,cAAQ7B,IAAIG,IAAJ,CAAS0B,MAHX;AAINC,YAAM9B,IAAIG,IAAJ,CAAS2B,IAJT;AAKNC,aAAO/B,IAAIG,IAAJ,CAAS4B,KALV;AAMNC,eAAShC,IAAIG,IAAJ,CAAS6B,OANZ;AAONC,iBAAWjC,IAAIG,IAAJ,CAAS8B,SAPd;AAQNP,aAAO1B,IAAIG,IAAJ,CAASuB,KARV;AASNC,aAAO3B,IAAIG,IAAJ,CAASwB,KATV;AAUNC,gBAAU5B,IAAIG,IAAJ,CAASyB,QAVb;AAWNM,oBAAclB,QAXR;AAYNmB,cAAQlC;AAZF,KADH,EAeJmC,IAfI,CAeC;AAAA,aAAY7C,IAAIC,MAAJ,CAAW,GAAX,EAAgBgB,IAAhB,CAAqB6B,QAArB,CAAZ;AAAA,KAfD,EAgBJC,KAhBI,CAgBE,UAAC3C,KAAD,EAAW;AAChB,UAAIqB,QAAJ,EAAc;AAAE5B,0BAAgB4B,QAAhB;AAA8B;AAC9C,aAAOzB,IAAIC,MAAJ,CAAW,GAAX,EAAgBgB,IAAhB,CAAqBb,KAArB,CAAP;AACD,KAnBI,CAAP;AAoBD,GA9D0B;;AA+D3B;AACA4C,QAhE2B,kBAgEpBvC,GAhEoB,EAgEfT,GAhEe,EAgEV;;AAEf,QAAIU,kBAAJ;AACA;AACA,QAAMC,QAAQF,IAAIG,IAAJ,CAASD,KAAT,IAAkBF,IAAII,KAAJ,CAAUF,KAA5B,IAAqCF,IAAIK,OAAJ,CAAY,gBAAZ,CAAnD;AACA,QAAI,CAACH,KAAL,EAAY;AACV,UAAIF,IAAIM,IAAR,EAAc;AACdlB,0BAAgBY,IAAIM,IAAJ,CAASC,IAAzB;AACD;AACC,aAAOhB,IAAIC,MAAJ,CAAW,GAAX,EAAgBgB,IAAhB,CAAqB,EAAEC,MAAM,KAAR,EAAef,SAAS,oBAAxB,EAArB,CAAP;AACD;;AAED;AACAgB,2BAAIC,MAAJ,CAAWT,KAAX,EAAkBU,cAAIC,GAAJ,CAAQ,aAAR,CAAlB,EAA0C,UAAS1B,GAAT,EAAc2B,OAAd,EAAuB;AACjE,UAAI3B,GAAJ,EAAS,OAAOI,IAAIC,MAAJ,CAAW,GAAX,EAAgBgB,IAAhB,CAAqB,EAAEC,MAAM,KAAR,EAAef,SAAS,+BAAxB,EAArB,CAAP;AACPO,kBAAYa,QAAQC,EAApB;AACD,KAHD;;AAKA,QAAIC,WAAW,EAAf;AACA,QAAIhB,IAAIM,IAAR,EAAc;AACZ,UAAMvB,kBAAgBiB,IAAIM,IAAJ,CAASC,IAA/B;AACA,UAAMvB,uCAAoC,IAAIiC,IAAJ,GAAWC,WAAX,KAA2BlB,IAAIM,IAAJ,CAASa,YAAxE,CAAN;AACA,UAAInB,IAAIM,IAAJ,CAASc,QAAT,KAAsB,YAAtB,IAAsCpB,IAAIM,IAAJ,CAASc,QAAT,KAAsB,WAAhE,EAA6E;AAC3E,YAAIpB,IAAIM,IAAJ,CAASe,IAAT,IAAiBxC,aAArB,EAAoC;AAClCC,qBAAWC,QAAX,EAAqBC,UAArB;AACA;AACAgC,qBAAWhC,WAAWsC,SAAX,CAAqB,CAArB,EAAwBtC,WAAWuC,MAAnC,CAAX;AACD,SAJD,MAIO;AAAEnC,qBAAWL,QAAX;AACP,iBAAOa,oBAAoBL,GAApB,CAAP;AACD;AACF,OARD,MAQO;AAAEH,mBAAWL,QAAX;AACP,eAAOO,oBAAoBC,GAApB,CAAP;AACD;AACF;;AAED,WAAOd,SACJ+D,QADI,CACKxC,IAAIyC,MAAJ,CAAWC,UADhB,EAC4B;AAC/BC,eAAS,CAAC,EAAEnE,OAAOE,MAAT,EAAiBkE,IAAI,SAArB,EAAD;AADsB,KAD5B,EAIJR,IAJI,CAIC,UAACC,QAAD,EAAc;AAClB,UAAI,CAACA,QAAL,EAAe;AACb;AACA,YAAIrB,QAAJ,EAAc;AAAE5B,4BAAgB4B,QAAhB;AAA8B;AAC9C,eAAOzB,IAAIC,MAAJ,CAAW,GAAX,EAAgBgB,IAAhB,CAAqB,EAAEd,SAAS,oBAAX,EAArB,CAAP;AACD;;AAED,UAAIO,cAAcoC,SAASF,MAA3B,EACC,OAAO5C,IAAIC,MAAJ,CAAW,GAAX,EAAgBgB,IAAhB,CAAqB,EAACd,SAAS,kBAAV,EAArB,CAAP;;AAED;AACA,UAAMmD,gBAAgBR,SAASH,YAA/B;;AAEA,aAAOG,SACJE,MADI,CACG;AACNf,sBAAcxB,IAAIG,IAAJ,CAASqB,YAAT,IAAyBa,SAASb,YAD1C;AAENC,qBAAazB,IAAIG,IAAJ,CAASsB,WAAT,IAAwBY,SAASZ,WAFxC;AAGNI,gBAAQ7B,IAAIG,IAAJ,CAAS0B,MAAT,IAAmBQ,SAASR,MAH9B;AAINC,cAAM9B,IAAIG,IAAJ,CAAS2B,IAAT,IAAiBO,SAASP,IAJ1B;AAKNC,eAAO/B,IAAIG,IAAJ,CAAS4B,KAAT,IAAkBM,SAASN,KAL5B;AAMNC,iBAAShC,IAAIG,IAAJ,CAAS6B,OAAT,IAAoBK,SAASL,OANhC;AAONC,mBAAWjC,IAAIG,IAAJ,CAAS8B,SAAT,IAAsBI,SAASJ,SAPpC;AAQNP,eAAO1B,IAAIG,IAAJ,CAASuB,KAAT,IAAkBW,SAASX,KAR5B;AASNC,eAAO3B,IAAIG,IAAJ,CAASwB,KAAT,IAAkBU,SAASV,KAT5B;AAUNC,kBAAU5B,IAAIG,IAAJ,CAASyB,QAAT,IAAqBS,SAAST,QAVlC;AAWNM,sBAAclB,YAAYqB,SAASH,YAX7B;AAYNC,gBAAQE,SAASF;AAZX,OADH,EAcFC,IAdE,CAcG,UAACU,iBAAD,EAAuB;AAC7B;AACA,YAAI9B,QAAJ,EAAc;AACZ,cAAI6B,aAAJ,EAAmB;AACjBzD,8BAAgByD,aAAhB;AACD;AACF;AACD,eAAOtD,IAAIC,MAAJ,CAAW,GAAX,EAAgBgB,IAAhB,CAAqBsC,iBAArB,CAAP;AACD,OAtBI,EAsBFR,KAtBE,CAsBI,UAAC3C,KAAD,EAAW;AAClB,YAAIqB,QAAJ,EAAc;AAAE5B,4BAAgB4B,QAAhB;AAA8B;AAC9C,eAAOzB,IAAIC,MAAJ,CAAW,GAAX,EAAgBgB,IAAhB,CAAqBb,KAArB,CAAP;AACD,OAzBI,CAAP;AA0BD,KA3CI,EA2CF2C,KA3CE,CA2CI;AAAA,aAAS/C,IAAIC,MAAJ,CAAW,GAAX,EAAgBgB,IAAhB,CAAqBb,KAArB,CAAT;AAAA,KA3CJ,CAAP;AA4CD,GA/I0B;;AAgJ3B;AACAoD,SAjJ2B,mBAiJnB/C,GAjJmB,EAiJdT,GAjJc,EAiJT;AAChB,WAAOd,SACJ+D,QADI,CACKxC,IAAIyC,MAAJ,CAAWC,UADhB,EAEJN,IAFI,CAEC,UAACC,QAAD,EAAc;AAClB,UAAI,CAACA,QAAL,EAAe;AACb,eAAO9C,IAAIC,MAAJ,CAAW,GAAX,EAAgBgB,IAAhB,CAAqB,EAAEd,SAAS,oBAAX,EAArB,CAAP;AACD;AACD,aAAO2C,SACJU,OADI,GAEJX,IAFI,CAEC,YAAM;AACV,YAAIC,SAASH,YAAb,EAA2B;AACzB9C,4BAAgBiD,SAASH,YAAzB;AACD;AACD,eAAO3C,IAAIC,MAAJ,CAAW,GAAX,EAAgBgB,IAAhB,EAAP;AACD,OAPI,EAOF8B,KAPE,CAOI;AAAA,eAAS/C,IAAIC,MAAJ,CAAW,GAAX,EAAgBgB,IAAhB,CAAqBb,KAArB,CAAT;AAAA,OAPJ,CAAP;AAQD,KAdI,EAcF2C,KAdE,CAcI;AAAA,aAAS/C,IAAIC,MAAJ,CAAW,GAAX,EAAgBgB,IAAhB,CAAqBb,KAArB,CAAT;AAAA,KAdJ,CAAP;AAeD,GAjK0B;;AAkK3B;AACAqD,UAnK2B,oBAmKlBhD,GAnKkB,EAmKbT,GAnKa,EAmKR;AACjB,WAAOd,SACJ+D,QADI,CACKxC,IAAIyC,MAAJ,CAAWC,UADhB,EAC4B;AAC/BC,eAAS,CAAC,EAAEnE,OAAOE,MAAT,EAAiBkE,IAAI,SAArB,EAAD;AADsB,KAD5B,EAIJR,IAJI,CAIC,UAACC,QAAD,EAAc;AAClB,UAAI,CAACA,QAAL,EAAe;AACb,eAAO9C,IAAIC,MAAJ,CAAW,GAAX,EAAgBgB,IAAhB,CAAqB,EAAEd,SAAS,oBAAX,EAArB,CAAP;AACD;AACD,aAAOH,IAAIC,MAAJ,CAAW,GAAX,EAAgBgB,IAAhB,CAAqB6B,QAArB,CAAP;AACD,KATI,EASFC,KATE,CASI;AAAA,aAAS/C,IAAIC,MAAJ,CAAW,GAAX,EAAgBgB,IAAhB,CAAqBb,KAArB,CAAT;AAAA,KATJ,CAAP;AAUD,GA9K0B;;AA+K3B;AACAsD,MAhL2B,gBAgLtBjD,GAhLsB,EAgLjBT,GAhLiB,EAgLZ;AACb,QAAI2D,sBAAJ;AACA,QAAI,CAAClD,IAAII,KAAJ,CAAU+C,QAAX,IAAuB,CAACnD,IAAII,KAAJ,CAAUwB,QAAtC,EAAgD;AAC9CsB,sBAAgBzE,SACb2E,OADa,CACL,EAAET,SAAS,CAAC,EAAEnE,OAAOE,MAAT,EAAiBkE,IAAI,SAArB,EAAD,CAAX,EADK,CAAhB;AAED;AACD,QAAI5C,IAAII,KAAJ,CAAU+C,QAAV,IAAsB,CAACnD,IAAII,KAAJ,CAAUwB,QAArC,EAA+C;AAC7CsB,sBAAgBzE,SACb2E,OADa,CACL;AACPC,eAAO,EAAErB,SAAShC,IAAII,KAAJ,CAAU+C,QAArB,EADA;AAEPR,iBAAS,CAAC,EAAEnE,OAAOE,MAAT,EAAiBkE,IAAI,SAArB,EAAD;AAFF,OADK,CAAhB;AAKD;AACD,QAAI,CAAC5C,IAAII,KAAJ,CAAU+C,QAAX,IAAuBnD,IAAII,KAAJ,CAAUwB,QAArC,EAA+C;AAC7CsB,sBAAgBzE,SACb2E,OADa,CACL;AACPC,eAAO,EAAEzB,UAAU5B,IAAII,KAAJ,CAAUwB,QAAtB,EADA;AAEPe,iBAAS,CAAC,EAAEnE,OAAOE,MAAT,EAAiBkE,IAAI,SAArB,EAAD;AAFF,OADK,CAAhB;AAKD;AACD,QAAI5C,IAAII,KAAJ,CAAU+C,QAAV,IAAsBnD,IAAII,KAAJ,CAAUwB,QAApC,EAA8C;AAC5CsB,sBAAgBzE,SACb2E,OADa,CACL;AACPC,eAAO,EAAErB,SAAShC,IAAII,KAAJ,CAAU+C,QAArB,EAA+BvB,UAAU5B,IAAII,KAAJ,CAAUwB,QAAnD,EADA;AAEPe,iBAAS,CAAC,EAAEnE,OAAOE,MAAT,EAAiBkE,IAAI,SAArB,EAAD;AAFF,OADK,CAAhB;AAKD;AACD,WAAOM,cACJd,IADI,CACC,UAACC,QAAD,EAAc;AAClB,UAAIA,SAASd,MAAT,KAAoB,CAAxB,EAA2B;AACzB,eAAOhC,IAAIC,MAAJ,CAAW,GAAX,EAAgBgB,IAAhB,CAAqB,EAAEd,SAAS,sBAAX,EAArB,CAAP;AACD;AACD,aAAOH,IAAIC,MAAJ,CAAW,GAAX,EAAgBgB,IAAhB,CAAqB6B,QAArB,CAAP;AACD,KANI,EAMFC,KANE,CAMI;AAAA,aAAS/C,IAAIC,MAAJ,CAAW,GAAX,EAAgBgB,IAAhB,CAAqBb,KAArB,CAAT;AAAA,KANJ,CAAP;AAOD;AAlN0B,CAA7B;;kBAqNeE,oB","file":"businesses.js","sourceRoot":"/home/somto/Andela/We-Connect/server/server/controllers","sourcesContent":["import multer from 'multer';\nimport fs from 'file-system';\nimport jwt from 'jsonwebtoken';\nimport model from '../models';\nimport app from '../../app';\n\nconst [Business, Review] = [model.Business, model.Review];\n\nconst upload = multer({\n  dest: './businessesUploads/'\n});\n\nconst fileSizeLimit = 1024 * 1024 * 2;\n\n/**\n * rename file to an appropriate name\n * @param {String} tempPath The temporary path name.\n * @param {String} targetPath The target path name.\n * @returns {void} nothing.\n */\nconst renameFile = (tempPath, targetPath) => {\n  fs.rename(tempPath, targetPath, (err) => {\n    if (err) throw err;\n  });\n};\n\n/**\n * delete a file\n * @param {String} targetPath The part to delete from\n * @returns {void} nothing.\n */\nconst deleteFile = (targetPath) => {\n  fs.unlink(targetPath, (err) => {\n    if (err) throw err;\n  });\n};\n\n// file type handleError\nconst fileTypeHandleError = (res) => {\n  res.status(403).json({ message: 'Only .png and .jpg files are allowed!', error: true });\n};\n\n// file size handleError\nconst fileSizeHandleError = (res) => {\n  res.status(403).json({ message: 'file should not be more than 2mb!', error: true });\n};\n\nconst businessesController = {\n  // image upload\n  upload: upload.single('companyImage'),\n  // create a business\n  create(req, res) {\n    let decodedID;\n    // check header or url parameters or post parameters for token\n    const token = req.body.token || req.query.token || req.headers['x-access-token'];\n    if (!token) {\n      if (req.file) {\n      deleteFile(`./${req.file.path}`);\n      }\n      return res.status(401).send({ auth: false, message: 'No token provided.' });\n    }\n\n    // verifies secret and checks exp\n    jwt.verify(token, app.get('superSecret'), function(err, decoded) {\n    if (err) return res.status(500).send({ auth: false, message: 'Failed to authenticate token.' });\n      decodedID = decoded.id;\n    });\n\n    let filePath = '';\n    if (req.file) {\n      const tempPath = `./${req.file.path}`;\n      const targetPath = `./businessesUploads/${new Date().toISOString() + req.file.originalname}`;\n      if (req.file.mimetype === 'image/jpeg' || req.file.mimetype === 'image/png') {\n        if (req.file.size <= fileSizeLimit) { renameFile(tempPath, targetPath);\n          // remove the dot in targetPath\n          filePath = targetPath.substring(1, targetPath.length);\n        } else { deleteFile(tempPath);\n          return fileSizeHandleError(res);\n        }\n      } else { deleteFile(tempPath);\n        return fileTypeHandleError(res);\n      }\n    }\n    if (!req.body.businessName || !req.body.description ||\n      !req.body.email || !req.body.phone || !req.body.category) {\n      if (filePath) { deleteFile(`./${filePath}`); }\n      return res.status(206).send({ message: 'Incomplete fields' });\n    }\n\n    return Business\n      .create({\n        businessName: req.body.businessName,\n        description: req.body.description,\n        street: req.body.street,\n        city: req.body.city,\n        state: req.body.state,\n        country: req.body.country,\n        datefound: req.body.datefound,\n        email: req.body.email,\n        phone: req.body.phone,\n        category: req.body.category,\n        companyImage: filePath,\n        userId: decodedID,\n      })\n      .then(business => res.status(201).send(business))\n      .catch((error) => {\n        if (filePath) { deleteFile(`./${filePath}`); }\n        return res.status(400).send(error);\n      });\n  },\n  // update business\n  update(req, res) {\n\n    let decodedID;\n    // check header or url parameters or post parameters for token\n    const token = req.body.token || req.query.token || req.headers['x-access-token'];\n    if (!token) {\n      if (req.file) {\n      deleteFile(`./${req.file.path}`);\n    }\n      return res.status(401).send({ auth: false, message: 'No token provided.' });\n    }\n\n    // verifies secret and checks exp\n    jwt.verify(token, app.get('superSecret'), function(err, decoded) {\n    if (err) return res.status(500).send({ auth: false, message: 'Failed to authenticate token.' });\n      decodedID = decoded.id;\n    });\n\n    let filePath = '';\n    if (req.file) {\n      const tempPath = `./${req.file.path}`;\n      const targetPath = `./businessesUploads/${new Date().toISOString() + req.file.originalname}`;\n      if (req.file.mimetype === 'image/jpeg' || req.file.mimetype === 'image/png') {\n        if (req.file.size <= fileSizeLimit) {\n          renameFile(tempPath, targetPath);\n          // remove the dot in targetPath\n          filePath = targetPath.substring(1, targetPath.length);\n        } else { deleteFile(tempPath);\n          return fileSizeHandleError(res);\n        }\n      } else { deleteFile(tempPath);\n        return fileTypeHandleError(res);\n      }\n    }\n\n    return Business\n      .findById(req.params.businessId, {\n        include: [{ model: Review, as: 'reviews' }]\n      })\n      .then((business) => {\n        if (!business) {\n          // if file and url is not empty delete img for updation\n          if (filePath) { deleteFile(`./${filePath}`); }\n          return res.status(404).send({ message: 'Business not found' });\n        }\n\n        if (decodedID !== business.userId)\n         return res.status(403).send({message: 'User not allowed'});\n\n        // holds the url of the image before update in other not to loose it\n        const previousImage = business.companyImage;\n\n        return business\n          .update({\n            businessName: req.body.businessName || business.businessName,\n            description: req.body.description || business.description,\n            street: req.body.street || business.street,\n            city: req.body.city || business.city,\n            state: req.body.state || business.state,\n            country: req.body.country || business.country,\n            datefound: req.body.datefound || business.datefound,\n            email: req.body.email || business.email,\n            phone: req.body.phone || business.phone,\n            category: req.body.category || business.category,\n            companyImage: filePath || business.companyImage,\n            userId: business.userId,\n          }).then((businessForUpdate) => {\n            // if file and url is not empty delete img for updation\n            if (filePath) {\n              if (previousImage) {\n                deleteFile(`./${previousImage}`);\n              }\n            }\n            return res.status(200).send(businessForUpdate);\n          }).catch((error) => {\n            if (filePath) { deleteFile(`./${filePath}`); }\n            return res.status(400).send(error);\n          });\n      }).catch(error => res.status(400).send(error));\n  },\n  // delete business\n  destroy(req, res) {\n    return Business\n      .findById(req.params.businessId)\n      .then((business) => {\n        if (!business) {\n          return res.status(404).send({ message: 'Business not found' });\n        }\n        return business\n          .destroy()\n          .then(() => {\n            if (business.companyImage) {\n              deleteFile(`./${business.companyImage}`);\n            }\n            return res.status(204).send();\n          }).catch(error => res.status(400).send(error));\n      }).catch(error => res.status(400).send(error));\n  },\n  // get a business\n  retrieve(req, res) {\n    return Business\n      .findById(req.params.businessId, {\n        include: [{ model: Review, as: 'reviews' }]\n      })\n      .then((business) => {\n        if (!business) {\n          return res.status(404).send({ message: 'Business not found' });\n        }\n        return res.status(200).send(business);\n      }).catch(error => res.status(400).send(error));\n  },\n  // get businesses\n  list(req, res) {\n    let selectionType;\n    if (!req.query.location && !req.query.category) {\n      selectionType = Business\n        .findAll({ include: [{ model: Review, as: 'reviews' }] });\n    }\n    if (req.query.location && !req.query.category) {\n      selectionType = Business\n        .findAll({\n          where: { country: req.query.location },\n          include: [{ model: Review, as: 'reviews' }]\n        });\n    }\n    if (!req.query.location && req.query.category) {\n      selectionType = Business\n        .findAll({\n          where: { category: req.query.category },\n          include: [{ model: Review, as: 'reviews' }]\n        });\n    }\n    if (req.query.location && req.query.category) {\n      selectionType = Business\n        .findAll({\n          where: { country: req.query.location, category: req.query.category },\n          include: [{ model: Review, as: 'reviews' }]\n        });\n    }\n    return selectionType\n      .then((business) => {\n        if (business.length === 0) {\n          return res.status(404).send({ message: 'Businesses not found' });\n        }\n        return res.status(200).send(business);\n      }).catch(error => res.status(400).send(error));\n  },\n};\n\nexport default businessesController;\n"]}